{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:/Users/parkj/Desktop/nginx-file-browser-master/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore.mjs';\nimport { parseMutationFilterArgs, notifyManager } from '@tanstack/query-core';\nimport { useQueryClient } from './QueryClientProvider.mjs';\nfunction useIsMutating(arg1, arg2, arg3) {\n  var _parseMutationFilterA = parseMutationFilterArgs(arg1, arg2, arg3),\n    _parseMutationFilterA2 = _slicedToArray(_parseMutationFilterA, 2),\n    filters = _parseMutationFilterA2[0],\n    _parseMutationFilterA3 = _parseMutationFilterA2[1],\n    options = _parseMutationFilterA3 === void 0 ? {} : _parseMutationFilterA3;\n  var queryClient = useQueryClient({\n    context: options.context\n  });\n  var mutationCache = queryClient.getMutationCache();\n  return useSyncExternalStore(React.useCallback(function (onStoreChange) {\n    return mutationCache.subscribe(notifyManager.batchCalls(onStoreChange));\n  }, [mutationCache]), function () {\n    return queryClient.isMutating(filters);\n  }, function () {\n    return queryClient.isMutating(filters);\n  });\n}\nexport { useIsMutating };","map":{"version":3,"names":["useIsMutating","arg1","arg2","arg3","_parseMutationFilterA","parseMutationFilterArgs","_parseMutationFilterA2","_slicedToArray","filters","_parseMutationFilterA3","options","mutationCache","queryClient","getMutationCache","useSyncExternalStore","React","useCallback","onStoreChange","subscribe","notifyManager","batchCalls","isMutating"],"sources":["C:\\Users\\parkj\\Desktop\\nginx-file-browser-master\\frontend\\node_modules\\@tanstack\\react-query\\src\\useIsMutating.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { MutationKey, MutationFilters } from '@tanstack/query-core'\nimport { notifyManager, parseMutationFilterArgs } from '@tanstack/query-core'\nimport type { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsMutating(\n  filters?: MutationFilters,\n  options?: Options,\n): number\nexport function useIsMutating(\n  mutationKey?: MutationKey,\n  filters?: Omit<MutationFilters, 'mutationKey'>,\n  options?: Options,\n): number\nexport function useIsMutating(\n  arg1?: MutationKey | MutationFilters,\n  arg2?: Omit<MutationFilters, 'mutationKey'> | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseMutationFilterArgs(arg1, arg2, arg3)\n\n  const queryClient = useQueryClient({ context: options.context })\n  const mutationCache = queryClient.getMutationCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        mutationCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [mutationCache],\n    ),\n    () => queryClient.isMutating(filters),\n    () => queryClient.isMutating(filters),\n  )\n}\n"],"mappings":";;;;;;;AAoBO,SAAAA,cAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;EAKL,IAAAC,qBAAA,GAAAC,uBAAA,CAAAJ,IAAA,EAAAC,IAAA,EAAAC,IAAA;IAAAG,sBAAA,GAAAC,cAAA,CAAAH,qBAAA;IAAAI,OAAA,GAAAF,sBAAA;IAAAG,sBAAA,GAAAH,sBAAA;IAAAI,OAAA,GAAAD,sBAAA,mBAAAA,sBAAA;;;EAEmC;EACnC,IAAAE,aAAA,GAAAC,WAAA,CAAAC,gBAAA;EAEA,OAAAC,oBAAA,CAAAC,KAAA,CAAAC,WAAA,WAAAC,aAAA;IAAA,OAAAN,aAAA,CAAAO,SAAA,CAAAC,aAAA,CAAAC,UAAA,CAAAH,aAAA;EAAA,IAAAN,aAAA;IAAA,OAAAC,WAAA,CAAAS,UAAA,CAAAb,OAAA;EAAA;IAAA,OAAAI,WAAA,CAAAS,UAAA,CAAAb,OAAA;EAAA;AASD"},"metadata":{},"sourceType":"module","externalDependencies":[]}