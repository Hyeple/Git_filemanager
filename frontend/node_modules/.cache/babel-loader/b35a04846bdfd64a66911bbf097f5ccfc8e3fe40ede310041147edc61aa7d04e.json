{"ast":null,"code":"/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\r\n * Throttle execution of a function. Especially useful for rate limiting\r\n * execution of handlers on events like resize and scroll.\r\n *\r\n * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)\r\n *                                            are most useful.\r\n * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,\r\n *                                            as-is, to `callback` when the throttled-function is executed.\r\n * @param {object} [options] -              An object to configure options.\r\n * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds\r\n *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed\r\n *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for\r\n *                                            `delay` milliseconds, the internal counter is reset).\r\n * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback\r\n *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that\r\n *                                            callback will never executed if both noLeading = true and noTrailing = true.\r\n * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is\r\n *                                            false (at end), schedule `callback` to execute after `delay` ms.\r\n *\r\n * @returns {Function} A new, throttled, function.\r\n */\nfunction throttle(delay, callback, options) {\n  var _ref = options || {},\n    _ref$noTrailing = _ref.noTrailing,\n    noTrailing = _ref$noTrailing === void 0 ? false : _ref$noTrailing,\n    _ref$noLeading = _ref.noLeading,\n    noLeading = _ref$noLeading === void 0 ? false : _ref$noLeading,\n    _ref$debounceMode = _ref.debounceMode,\n    debounceMode = _ref$debounceMode === void 0 ? undefined : _ref$debounceMode;\n  /*\r\n   * After wrapper has stopped being called, this timeout ensures that\r\n   * `callback` is executed at the proper times in `throttle` and `end`\r\n   * debounce modes.\r\n   */\n\n  var timeoutID;\n  var cancelled = false; // Keep track of the last time `callback` was executed.\n\n  var lastExec = 0; // Function to clear existing timeout\n\n  function clearExistingTimeout() {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n  } // Function to cancel next exec\n\n  function cancel(options) {\n    var _ref2 = options || {},\n      _ref2$upcomingOnly = _ref2.upcomingOnly,\n      upcomingOnly = _ref2$upcomingOnly === void 0 ? false : _ref2$upcomingOnly;\n    clearExistingTimeout();\n    cancelled = !upcomingOnly;\n  }\n  /*\r\n   * The `wrapper` function encapsulates all of the throttling / debouncing\r\n   * functionality and when executed will limit the rate at which `callback`\r\n   * is executed.\r\n   */\n\n  function wrapper() {\n    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n      arguments_[_key] = arguments[_key];\n    }\n    var self = this;\n    var elapsed = Date.now() - lastExec;\n    if (cancelled) {\n      return;\n    } // Execute `callback` and update the `lastExec` timestamp.\n\n    function exec() {\n      lastExec = Date.now();\n      callback.apply(self, arguments_);\n    }\n    /*\r\n     * If `debounceMode` is true (at begin) this is used to clear the flag\r\n     * to allow future `callback` executions.\r\n     */\n\n    function clear() {\n      timeoutID = undefined;\n    }\n    if (!noLeading && debounceMode && !timeoutID) {\n      /*\r\n       * Since `wrapper` is being called for the first time and\r\n       * `debounceMode` is true (at begin), execute `callback`\r\n       * and noLeading != true.\r\n       */\n      exec();\n    }\n    clearExistingTimeout();\n    if (debounceMode === undefined && elapsed > delay) {\n      if (noLeading) {\n        /*\r\n         * In throttle mode with noLeading, if `delay` time has\r\n         * been exceeded, update `lastExec` and schedule `callback`\r\n         * to execute after `delay` ms.\r\n         */\n        lastExec = Date.now();\n        if (!noTrailing) {\n          timeoutID = setTimeout(debounceMode ? clear : exec, delay);\n        }\n      } else {\n        /*\r\n         * In throttle mode without noLeading, if `delay` time has been exceeded, execute\r\n         * `callback`.\r\n         */\n        exec();\n      }\n    } else if (noTrailing !== true) {\n      /*\r\n       * In trailing throttle mode, since `delay` time has not been\r\n       * exceeded, schedule `callback` to execute `delay` ms after most\r\n       * recent execution.\r\n       *\r\n       * If `debounceMode` is true (at begin), schedule `clear` to execute\r\n       * after `delay` ms.\r\n       *\r\n       * If `debounceMode` is false (at end), schedule `callback` to\r\n       * execute after `delay` ms.\r\n       */\n      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n    }\n  }\n  wrapper.cancel = cancel; // Return the wrapper function.\n\n  return wrapper;\n}\n\n/* eslint-disable no-undefined */\n/**\r\n * Debounce execution of a function. Debouncing, unlike throttling,\r\n * guarantees that a function is only executed a single time, either at the\r\n * very beginning of a series of calls, or at the very end.\r\n *\r\n * @param {number} delay -               A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\r\n * @param {Function} callback -          A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\r\n *                                        to `callback` when the debounced-function is executed.\r\n * @param {object} [options] -           An object to configure options.\r\n * @param {boolean} [options.atBegin] -  Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\r\n *                                        after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\r\n *                                        (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\r\n *\r\n * @returns {Function} A new, debounced function.\r\n */\n\nfunction debounce(delay, callback, options) {\n  var _ref = options || {},\n    _ref$atBegin = _ref.atBegin,\n    atBegin = _ref$atBegin === void 0 ? false : _ref$atBegin;\n  return throttle(delay, callback, {\n    debounceMode: atBegin !== false\n  });\n}\nexport { debounce, throttle };","map":{"version":3,"names":["throttle","delay","callback","options","_ref","_ref$noTrailing","noTrailing","_ref$noLeading","noLeading","_ref$debounceMode","debounceMode","undefined","timeoutID","cancelled","lastExec","clearExistingTimeout","clearTimeout","cancel","_ref2","_ref2$upcomingOnly","upcomingOnly","wrapper","_len","arguments","length","arguments_","Array","_key","self","elapsed","Date","now","exec","apply","clear","setTimeout","debounce","_ref$atBegin","atBegin"],"sources":["C:\\Users\\parkj\\Desktop\\OSS\\Git_filemanager\\frontend\\node_modules\\throttle-debounce\\throttle.js","C:\\Users\\parkj\\Desktop\\OSS\\Git_filemanager\\frontend\\node_modules\\throttle-debounce\\debounce.js"],"sourcesContent":["/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)\n *                                            are most useful.\n * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,\n *                                            as-is, to `callback` when the throttled-function is executed.\n * @param {object} [options] -              An object to configure options.\n * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds\n *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed\n *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for\n *                                            `delay` milliseconds, the internal counter is reset).\n * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback\n *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that\n *                                            callback will never executed if both noLeading = true and noTrailing = true.\n * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is\n *                                            false (at end), schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function} A new, throttled, function.\n */\nexport default function (delay, callback, options) {\n\tconst {\n\t\tnoTrailing = false,\n\t\tnoLeading = false,\n\t\tdebounceMode = undefined\n\t} = options || {};\n\t/*\n\t * After wrapper has stopped being called, this timeout ensures that\n\t * `callback` is executed at the proper times in `throttle` and `end`\n\t * debounce modes.\n\t */\n\tlet timeoutID;\n\tlet cancelled = false;\n\n\t// Keep track of the last time `callback` was executed.\n\tlet lastExec = 0;\n\n\t// Function to clear existing timeout\n\tfunction clearExistingTimeout() {\n\t\tif (timeoutID) {\n\t\t\tclearTimeout(timeoutID);\n\t\t}\n\t}\n\n\t// Function to cancel next exec\n\tfunction cancel(options) {\n\t\tconst { upcomingOnly = false } = options || {};\n\t\tclearExistingTimeout();\n\t\tcancelled = !upcomingOnly;\n\t}\n\n\t/*\n\t * The `wrapper` function encapsulates all of the throttling / debouncing\n\t * functionality and when executed will limit the rate at which `callback`\n\t * is executed.\n\t */\n\tfunction wrapper(...arguments_) {\n\t\tlet self = this;\n\t\tlet elapsed = Date.now() - lastExec;\n\n\t\tif (cancelled) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Execute `callback` and update the `lastExec` timestamp.\n\t\tfunction exec() {\n\t\t\tlastExec = Date.now();\n\t\t\tcallback.apply(self, arguments_);\n\t\t}\n\n\t\t/*\n\t\t * If `debounceMode` is true (at begin) this is used to clear the flag\n\t\t * to allow future `callback` executions.\n\t\t */\n\t\tfunction clear() {\n\t\t\ttimeoutID = undefined;\n\t\t}\n\n\t\tif (!noLeading && debounceMode && !timeoutID) {\n\t\t\t/*\n\t\t\t * Since `wrapper` is being called for the first time and\n\t\t\t * `debounceMode` is true (at begin), execute `callback`\n\t\t\t * and noLeading != true.\n\t\t\t */\n\t\t\texec();\n\t\t}\n\n\t\tclearExistingTimeout();\n\n\t\tif (debounceMode === undefined && elapsed > delay) {\n\t\t\tif (noLeading) {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode with noLeading, if `delay` time has\n\t\t\t\t * been exceeded, update `lastExec` and schedule `callback`\n\t\t\t\t * to execute after `delay` ms.\n\t\t\t\t */\n\t\t\t\tlastExec = Date.now();\n\t\t\t\tif (!noTrailing) {\n\t\t\t\t\ttimeoutID = setTimeout(debounceMode ? clear : exec, delay);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode without noLeading, if `delay` time has been exceeded, execute\n\t\t\t\t * `callback`.\n\t\t\t\t */\n\t\t\t\texec();\n\t\t\t}\n\t\t} else if (noTrailing !== true) {\n\t\t\t/*\n\t\t\t * In trailing throttle mode, since `delay` time has not been\n\t\t\t * exceeded, schedule `callback` to execute `delay` ms after most\n\t\t\t * recent execution.\n\t\t\t *\n\t\t\t * If `debounceMode` is true (at begin), schedule `clear` to execute\n\t\t\t * after `delay` ms.\n\t\t\t *\n\t\t\t * If `debounceMode` is false (at end), schedule `callback` to\n\t\t\t * execute after `delay` ms.\n\t\t\t */\n\t\t\ttimeoutID = setTimeout(\n\t\t\t\tdebounceMode ? clear : exec,\n\t\t\t\tdebounceMode === undefined ? delay - elapsed : delay\n\t\t\t);\n\t\t}\n\t}\n\n\twrapper.cancel = cancel;\n\n\t// Return the wrapper function.\n\treturn wrapper;\n}\n","/* eslint-disable no-undefined */\n\nimport throttle from './throttle.js';\n\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param {number} delay -               A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param {Function} callback -          A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                        to `callback` when the debounced-function is executed.\n * @param {object} [options] -           An object to configure options.\n * @param {boolean} [options.atBegin] -  Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                        after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                        (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n *\n * @returns {Function} A new, debounced function.\n */\nexport default function (delay, callback, options) {\n\tconst { atBegin = false } = options || {};\n\treturn throttle(delay, callback, { debounceMode: atBegin !== false });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}