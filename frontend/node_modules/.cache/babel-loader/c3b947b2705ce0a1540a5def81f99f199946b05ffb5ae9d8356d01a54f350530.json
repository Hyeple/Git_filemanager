{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nimport { ClassRegistry } from './class-registry';\nimport { Registry } from './registry';\nimport { CustomTransformerRegistry } from './custom-transformer-registry';\nimport { walker, applyReferentialEqualityAnnotations, applyValueAnnotations, generateReferentialEqualityAnnotations } from './plainer';\nimport { copy } from 'copy-anything';\nvar SuperJSON = /** @class */function () {\n  function SuperJSON() {\n    this.classRegistry = new ClassRegistry();\n    this.symbolRegistry = new Registry(function (s) {\n      var _a;\n      return (_a = s.description) !== null && _a !== void 0 ? _a : '';\n    });\n    this.customTransformerRegistry = new CustomTransformerRegistry();\n    this.allowedErrorProps = [];\n  }\n  SuperJSON.prototype.serialize = function (object) {\n    var identities = new Map();\n    var output = walker(object, identities, this);\n    var res = {\n      json: output.transformedValue\n    };\n    if (output.annotations) {\n      res.meta = __assign(__assign({}, res.meta), {\n        values: output.annotations\n      });\n    }\n    var equalityAnnotations = generateReferentialEqualityAnnotations(identities);\n    if (equalityAnnotations) {\n      res.meta = __assign(__assign({}, res.meta), {\n        referentialEqualities: equalityAnnotations\n      });\n    }\n    return res;\n  };\n  SuperJSON.prototype.deserialize = function (payload) {\n    var json = payload.json,\n      meta = payload.meta;\n    var result = copy(json);\n    if (meta === null || meta === void 0 ? void 0 : meta.values) {\n      result = applyValueAnnotations(result, meta.values, this);\n    }\n    if (meta === null || meta === void 0 ? void 0 : meta.referentialEqualities) {\n      result = applyReferentialEqualityAnnotations(result, meta.referentialEqualities);\n    }\n    return result;\n  };\n  SuperJSON.prototype.stringify = function (object) {\n    return JSON.stringify(this.serialize(object));\n  };\n  SuperJSON.prototype.parse = function (string) {\n    return this.deserialize(JSON.parse(string));\n  };\n  SuperJSON.prototype.registerClass = function (v, options) {\n    this.classRegistry.register(v, options);\n  };\n  SuperJSON.prototype.registerSymbol = function (v, identifier) {\n    this.symbolRegistry.register(v, identifier);\n  };\n  SuperJSON.prototype.registerCustom = function (transformer, name) {\n    this.customTransformerRegistry.register(__assign({\n      name: name\n    }, transformer));\n  };\n  SuperJSON.prototype.allowErrorProps = function () {\n    var _a;\n    var props = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      props[_i] = arguments[_i];\n    }\n    (_a = this.allowedErrorProps).push.apply(_a, __spreadArray([], __read(props)));\n  };\n  SuperJSON.defaultInstance = new SuperJSON();\n  SuperJSON.serialize = SuperJSON.defaultInstance.serialize.bind(SuperJSON.defaultInstance);\n  SuperJSON.deserialize = SuperJSON.defaultInstance.deserialize.bind(SuperJSON.defaultInstance);\n  SuperJSON.stringify = SuperJSON.defaultInstance.stringify.bind(SuperJSON.defaultInstance);\n  SuperJSON.parse = SuperJSON.defaultInstance.parse.bind(SuperJSON.defaultInstance);\n  SuperJSON.registerClass = SuperJSON.defaultInstance.registerClass.bind(SuperJSON.defaultInstance);\n  SuperJSON.registerSymbol = SuperJSON.defaultInstance.registerSymbol.bind(SuperJSON.defaultInstance);\n  SuperJSON.registerCustom = SuperJSON.defaultInstance.registerCustom.bind(SuperJSON.defaultInstance);\n  SuperJSON.allowErrorProps = SuperJSON.defaultInstance.allowErrorProps.bind(SuperJSON.defaultInstance);\n  return SuperJSON;\n}();\nexport default SuperJSON;\nexport var serialize = SuperJSON.serialize;\nexport var deserialize = SuperJSON.deserialize;\nexport var stringify = SuperJSON.stringify;\nexport var parse = SuperJSON.parse;\nexport var registerClass = SuperJSON.registerClass;\nexport var registerCustom = SuperJSON.registerCustom;\nexport var registerSymbol = SuperJSON.registerSymbol;\nexport var allowErrorProps = SuperJSON.allowErrorProps;","map":{"version":3,"names":["ClassRegistry","Registry","CustomTransformerRegistry","walker","applyReferentialEqualityAnnotations","applyValueAnnotations","generateReferentialEqualityAnnotations","copy","SuperJSON","classRegistry","symbolRegistry","s","_a","description","customTransformerRegistry","allowedErrorProps","prototype","serialize","object","identities","Map","output","res","json","transformedValue","annotations","meta","__assign","values","equalityAnnotations","referentialEqualities","deserialize","payload","result","stringify","JSON","parse","string","registerClass","v","options","register","registerSymbol","identifier","registerCustom","transformer","name","allowErrorProps","props","_i","arguments","length","push","apply","__spreadArray","__read","defaultInstance","bind"],"sources":["C:\\Users\\parkj\\Desktop\\nginx-file-browser-master\\frontend\\node_modules\\superjson\\src\\index.ts"],"sourcesContent":["import { SuperJSONResult, SuperJSONValue, Class, JSONValue } from './types';\nimport { ClassRegistry, RegisterOptions } from './class-registry';\nimport { Registry } from './registry';\nimport {\n  CustomTransfomer,\n  CustomTransformerRegistry,\n} from './custom-transformer-registry';\nimport {\n  walker,\n  applyReferentialEqualityAnnotations,\n  applyValueAnnotations,\n  generateReferentialEqualityAnnotations,\n} from './plainer';\nimport { copy } from 'copy-anything';\n\nexport default class SuperJSON {\n  serialize(object: SuperJSONValue): SuperJSONResult {\n    const identities = new Map<any, any[][]>();\n    const output = walker(object, identities, this);\n    const res: SuperJSONResult = {\n      json: output.transformedValue,\n    };\n\n    if (output.annotations) {\n      res.meta = {\n        ...res.meta,\n        values: output.annotations,\n      };\n    }\n\n    const equalityAnnotations = generateReferentialEqualityAnnotations(\n      identities\n    );\n    if (equalityAnnotations) {\n      res.meta = {\n        ...res.meta,\n        referentialEqualities: equalityAnnotations,\n      };\n    }\n\n    return res;\n  }\n\n  deserialize<T = unknown>(payload: SuperJSONResult): T {\n    const { json, meta } = payload;\n\n    let result: T = copy(json) as any;\n\n    if (meta?.values) {\n      result = applyValueAnnotations(result, meta.values, this);\n    }\n\n    if (meta?.referentialEqualities) {\n      result = applyReferentialEqualityAnnotations(\n        result,\n        meta.referentialEqualities\n      );\n    }\n\n    return result;\n  }\n\n  stringify(object: SuperJSONValue): string {\n    return JSON.stringify(this.serialize(object));\n  }\n\n  parse<T = unknown>(string: string): T {\n    return this.deserialize(JSON.parse(string));\n  }\n\n  readonly classRegistry = new ClassRegistry();\n  registerClass(v: Class, options?: RegisterOptions | string) {\n    this.classRegistry.register(v, options);\n  }\n\n  readonly symbolRegistry = new Registry<Symbol>(s => s.description ?? '');\n  registerSymbol(v: Symbol, identifier?: string) {\n    this.symbolRegistry.register(v, identifier);\n  }\n\n  readonly customTransformerRegistry = new CustomTransformerRegistry();\n  registerCustom<I, O extends JSONValue>(\n    transformer: Omit<CustomTransfomer<I, O>, 'name'>,\n    name: string\n  ) {\n    this.customTransformerRegistry.register({\n      name,\n      ...transformer,\n    });\n  }\n\n  readonly allowedErrorProps: string[] = [];\n  allowErrorProps(...props: string[]) {\n    this.allowedErrorProps.push(...props);\n  }\n\n  private static defaultInstance = new SuperJSON();\n  static serialize = SuperJSON.defaultInstance.serialize.bind(\n    SuperJSON.defaultInstance\n  );\n  static deserialize = SuperJSON.defaultInstance.deserialize.bind(\n    SuperJSON.defaultInstance\n  );\n  static stringify = SuperJSON.defaultInstance.stringify.bind(\n    SuperJSON.defaultInstance\n  );\n  static parse = SuperJSON.defaultInstance.parse.bind(\n    SuperJSON.defaultInstance\n  );\n  static registerClass = SuperJSON.defaultInstance.registerClass.bind(\n    SuperJSON.defaultInstance\n  );\n  static registerSymbol = SuperJSON.defaultInstance.registerSymbol.bind(\n    SuperJSON.defaultInstance\n  );\n  static registerCustom = SuperJSON.defaultInstance.registerCustom.bind(\n    SuperJSON.defaultInstance\n  );\n  static allowErrorProps = SuperJSON.defaultInstance.allowErrorProps.bind(\n    SuperJSON.defaultInstance\n  );\n}\n\nexport const serialize = SuperJSON.serialize;\nexport const deserialize = SuperJSON.deserialize;\n\nexport const stringify = SuperJSON.stringify;\nexport const parse = SuperJSON.parse;\n\nexport const registerClass = SuperJSON.registerClass;\nexport const registerCustom = SuperJSON.registerCustom;\nexport const registerSymbol = SuperJSON.registerSymbol;\nexport const allowErrorProps = SuperJSON.allowErrorProps;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}