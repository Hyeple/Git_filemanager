{"ast":null,"code":"/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2013 Roman Shtylman\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module dependencies.\r\n * @private\r\n */\nvar debug = require('debug')('express:view');\nvar path = require('path');\nvar fs = require('fs');\n\n/**\r\n * Module variables.\r\n * @private\r\n */\n\nvar dirname = path.dirname;\nvar basename = path.basename;\nvar extname = path.extname;\nvar join = path.join;\nvar resolve = path.resolve;\n\n/**\r\n * Module exports.\r\n * @public\r\n */\n\nmodule.exports = View;\n\n/**\r\n * Initialize a new `View` with the given `name`.\r\n *\r\n * Options:\r\n *\r\n *   - `defaultEngine` the default template engine name\r\n *   - `engines` template engine require() cache\r\n *   - `root` root path for view lookup\r\n *\r\n * @param {string} name\r\n * @param {object} options\r\n * @public\r\n */\n\nfunction View(name, options) {\n  var opts = options || {};\n  this.defaultEngine = opts.defaultEngine;\n  this.ext = extname(name);\n  this.name = name;\n  this.root = opts.root;\n  if (!this.ext && !this.defaultEngine) {\n    throw new Error('No default engine was specified and no extension was provided.');\n  }\n  var fileName = name;\n  if (!this.ext) {\n    // get extension from default engine name\n    this.ext = this.defaultEngine[0] !== '.' ? '.' + this.defaultEngine : this.defaultEngine;\n    fileName += this.ext;\n  }\n  if (!opts.engines[this.ext]) {\n    // load engine\n    var mod = this.ext.slice(1);\n    debug('require \"%s\"', mod);\n\n    // default engine export\n    var fn = require(mod).__express;\n    if (typeof fn !== 'function') {\n      throw new Error('Module \"' + mod + '\" does not provide a view engine.');\n    }\n    opts.engines[this.ext] = fn;\n  }\n\n  // store loaded engine\n  this.engine = opts.engines[this.ext];\n\n  // lookup path\n  this.path = this.lookup(fileName);\n}\n\n/**\r\n * Lookup view by the given `name`\r\n *\r\n * @param {string} name\r\n * @private\r\n */\n\nView.prototype.lookup = function lookup(name) {\n  var path;\n  var roots = [].concat(this.root);\n  debug('lookup \"%s\"', name);\n  for (var i = 0; i < roots.length && !path; i++) {\n    var root = roots[i];\n\n    // resolve the path\n    var loc = resolve(root, name);\n    var dir = dirname(loc);\n    var file = basename(loc);\n\n    // resolve the file\n    path = this.resolve(dir, file);\n  }\n  return path;\n};\n\n/**\r\n * Render with the given options.\r\n *\r\n * @param {object} options\r\n * @param {function} callback\r\n * @private\r\n */\n\nView.prototype.render = function render(options, callback) {\n  debug('render \"%s\"', this.path);\n  this.engine(this.path, options, callback);\n};\n\n/**\r\n * Resolve the file within the given directory.\r\n *\r\n * @param {string} dir\r\n * @param {string} file\r\n * @private\r\n */\n\nView.prototype.resolve = function resolve(dir, file) {\n  var ext = this.ext;\n\n  // <path>.<ext>\n  var path = join(dir, file);\n  var stat = tryStat(path);\n  if (stat && stat.isFile()) {\n    return path;\n  }\n\n  // <path>/index.<ext>\n  path = join(dir, basename(file, ext), 'index' + ext);\n  stat = tryStat(path);\n  if (stat && stat.isFile()) {\n    return path;\n  }\n};\n\n/**\r\n * Return a stat, maybe.\r\n *\r\n * @param {string} path\r\n * @return {fs.Stats}\r\n * @private\r\n */\n\nfunction tryStat(path) {\n  debug('stat \"%s\"', path);\n  try {\n    return fs.statSync(path);\n  } catch (e) {\n    return undefined;\n  }\n}","map":{"version":3,"names":["debug","require","path","fs","dirname","basename","extname","join","resolve","module","exports","View","name","options","opts","defaultEngine","ext","root","Error","fileName","engines","mod","slice","fn","__express","engine","lookup","prototype","roots","concat","i","length","loc","dir","file","render","callback","stat","tryStat","isFile","statSync","e","undefined"],"sources":["C:/Users/parkj/Desktop/OSS/Git_filemanager/frontend/node_modules/express/lib/view.js"],"sourcesContent":["/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2013 Roman Shtylman\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar debug = require('debug')('express:view');\r\nvar path = require('path');\r\nvar fs = require('fs');\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar dirname = path.dirname;\r\nvar basename = path.basename;\r\nvar extname = path.extname;\r\nvar join = path.join;\r\nvar resolve = path.resolve;\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = View;\r\n\r\n/**\r\n * Initialize a new `View` with the given `name`.\r\n *\r\n * Options:\r\n *\r\n *   - `defaultEngine` the default template engine name\r\n *   - `engines` template engine require() cache\r\n *   - `root` root path for view lookup\r\n *\r\n * @param {string} name\r\n * @param {object} options\r\n * @public\r\n */\r\n\r\nfunction View(name, options) {\r\n  var opts = options || {};\r\n\r\n  this.defaultEngine = opts.defaultEngine;\r\n  this.ext = extname(name);\r\n  this.name = name;\r\n  this.root = opts.root;\r\n\r\n  if (!this.ext && !this.defaultEngine) {\r\n    throw new Error('No default engine was specified and no extension was provided.');\r\n  }\r\n\r\n  var fileName = name;\r\n\r\n  if (!this.ext) {\r\n    // get extension from default engine name\r\n    this.ext = this.defaultEngine[0] !== '.'\r\n      ? '.' + this.defaultEngine\r\n      : this.defaultEngine;\r\n\r\n    fileName += this.ext;\r\n  }\r\n\r\n  if (!opts.engines[this.ext]) {\r\n    // load engine\r\n    var mod = this.ext.slice(1)\r\n    debug('require \"%s\"', mod)\r\n\r\n    // default engine export\r\n    var fn = require(mod).__express\r\n\r\n    if (typeof fn !== 'function') {\r\n      throw new Error('Module \"' + mod + '\" does not provide a view engine.')\r\n    }\r\n\r\n    opts.engines[this.ext] = fn\r\n  }\r\n\r\n  // store loaded engine\r\n  this.engine = opts.engines[this.ext];\r\n\r\n  // lookup path\r\n  this.path = this.lookup(fileName);\r\n}\r\n\r\n/**\r\n * Lookup view by the given `name`\r\n *\r\n * @param {string} name\r\n * @private\r\n */\r\n\r\nView.prototype.lookup = function lookup(name) {\r\n  var path;\r\n  var roots = [].concat(this.root);\r\n\r\n  debug('lookup \"%s\"', name);\r\n\r\n  for (var i = 0; i < roots.length && !path; i++) {\r\n    var root = roots[i];\r\n\r\n    // resolve the path\r\n    var loc = resolve(root, name);\r\n    var dir = dirname(loc);\r\n    var file = basename(loc);\r\n\r\n    // resolve the file\r\n    path = this.resolve(dir, file);\r\n  }\r\n\r\n  return path;\r\n};\r\n\r\n/**\r\n * Render with the given options.\r\n *\r\n * @param {object} options\r\n * @param {function} callback\r\n * @private\r\n */\r\n\r\nView.prototype.render = function render(options, callback) {\r\n  debug('render \"%s\"', this.path);\r\n  this.engine(this.path, options, callback);\r\n};\r\n\r\n/**\r\n * Resolve the file within the given directory.\r\n *\r\n * @param {string} dir\r\n * @param {string} file\r\n * @private\r\n */\r\n\r\nView.prototype.resolve = function resolve(dir, file) {\r\n  var ext = this.ext;\r\n\r\n  // <path>.<ext>\r\n  var path = join(dir, file);\r\n  var stat = tryStat(path);\r\n\r\n  if (stat && stat.isFile()) {\r\n    return path;\r\n  }\r\n\r\n  // <path>/index.<ext>\r\n  path = join(dir, basename(file, ext), 'index' + ext);\r\n  stat = tryStat(path);\r\n\r\n  if (stat && stat.isFile()) {\r\n    return path;\r\n  }\r\n};\r\n\r\n/**\r\n * Return a stat, maybe.\r\n *\r\n * @param {string} path\r\n * @return {fs.Stats}\r\n * @private\r\n */\r\n\r\nfunction tryStat(path) {\r\n  debug('stat \"%s\"', path);\r\n\r\n  try {\r\n    return fs.statSync(path);\r\n  } catch (e) {\r\n    return undefined;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}