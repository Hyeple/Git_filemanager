{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nvar defaultContext = /*#__PURE__*/React.createContext(undefined);\nvar QueryClientSharingContext = /*#__PURE__*/React.createContext(false); // If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\n\nfunction getQueryClientContext(context, contextSharing) {\n  if (context) {\n    return context;\n  }\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext;\n    }\n    return window.ReactQueryClientContext;\n  }\n  return defaultContext;\n}\nvar useQueryClient = function useQueryClient() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    context = _ref.context;\n  var queryClient = React.useContext(getQueryClientContext(context, React.useContext(QueryClientSharingContext)));\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n  return queryClient;\n};\nvar QueryClientProvider = function QueryClientProvider(_ref2) {\n  var client = _ref2.client,\n    children = _ref2.children,\n    context = _ref2.context,\n    _ref2$contextSharing = _ref2.contextSharing,\n    contextSharing = _ref2$contextSharing === void 0 ? false : _ref2$contextSharing;\n  React.useEffect(function () {\n    client.mount();\n    return function () {\n      client.unmount();\n    };\n  }, [client]);\n  if (process.env.NODE_ENV !== 'production' && contextSharing) {\n    client.getLogger().error(\"The contextSharing option has been deprecated and will be removed in the next major version\");\n  }\n  var Context = getQueryClientContext(context, contextSharing);\n  return /*#__PURE__*/React.createElement(QueryClientSharingContext.Provider, {\n    value: !context && contextSharing\n  }, /*#__PURE__*/React.createElement(Context.Provider, {\n    value: client\n  }, children));\n};\nexport { QueryClientProvider, defaultContext, useQueryClient };","map":{"version":3,"names":["defaultContext","React","createContext","undefined","QueryClientSharingContext","getQueryClientContext","context","contextSharing","window","ReactQueryClientContext","useQueryClient","_ref","arguments","length","queryClient","useContext","Error","QueryClientProvider","_ref2","_ref2$contextSharing","client","mount","unmount","Context","value"],"sources":["C:\\Users\\parkj\\Desktop\\OSS\\Git_filemanager\\frontend\\node_modules\\@tanstack\\react-query\\src\\QueryClientProvider.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport type { QueryClient } from '@tanstack/query-core'\nimport type { ContextOptions } from './types'\n\ndeclare global {\n  interface Window {\n    ReactQueryClientContext?: React.Context<QueryClient | undefined>\n  }\n}\n\nexport const defaultContext = React.createContext<QueryClient | undefined>(\n  undefined,\n)\nconst QueryClientSharingContext = React.createContext<boolean>(false)\n\n// If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(\n  context: React.Context<QueryClient | undefined> | undefined,\n  contextSharing: boolean,\n) {\n  if (context) {\n    return context\n  }\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext\n    }\n\n    return window.ReactQueryClientContext\n  }\n\n  return defaultContext\n}\n\nexport const useQueryClient = ({ context }: ContextOptions = {}) => {\n  const queryClient = React.useContext(\n    getQueryClientContext(context, React.useContext(QueryClientSharingContext)),\n  )\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return queryClient\n}\n\ntype QueryClientProviderPropsBase = {\n  client: QueryClient\n  children?: React.ReactNode\n}\ntype QueryClientProviderPropsWithContext = ContextOptions & {\n  contextSharing?: never\n} & QueryClientProviderPropsBase\ntype QueryClientProviderPropsWithContextSharing = {\n  context?: never\n  contextSharing?: boolean\n} & QueryClientProviderPropsBase\n\nexport type QueryClientProviderProps =\n  | QueryClientProviderPropsWithContext\n  | QueryClientProviderPropsWithContextSharing\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n  context,\n  contextSharing = false,\n}: QueryClientProviderProps): JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  if (process.env.NODE_ENV !== 'production' && contextSharing) {\n    client\n      .getLogger()\n      .error(\n        `The contextSharing option has been deprecated and will be removed in the next major version`,\n      )\n  }\n\n  const Context = getQueryClientContext(context, contextSharing)\n\n  return (\n    <QueryClientSharingContext.Provider value={!context && contextSharing}>\n      <Context.Provider value={client}>{children}</Context.Provider>\n    </QueryClientSharingContext.Provider>\n  )\n}\n"],"mappings":";;;AAYO,IAAAA,cAAA,gBAAAC,KAAA,CAAAC,aAAA,CAAAC,SAAA;AAGP,IAAAC,yBAAA,gBAAAH,KAAA,CAAAC,aAAA;AAGA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAAG,sBAAAC,OAAA,EAAAC,cAAA;EAIE,IAAAD,OAAA;IACE,OAAAA,OAAA;EACD;EACD,IAAAC,cAAA,WAAAC,MAAA;IACE,KAAAA,MAAA,CAAAC,uBAAA;;IAEC;;EAGF;EAED,OAAAT,cAAA;AACD;AAEM,IAAAU,cAAA,YAAAA,eAAA,EAAwB;EAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAT,SAAA,GAAAS,SAAA;IAAEN,OAAA,GAAAK,IAAA,CAAAL,OAAA;EAC/B,IAAAQ,WAAA,GAAAb,KAAA,CAAAc,UAAA,CAAAV,qBAAA,CAAAC,OAAA,EAAAL,KAAA,CAAAc,UAAA,CAAAX,yBAAA;;IAKE,UAAAY,KAAA;EACD;EAED,OAAAF,WAAA;AACD;AAkBM,IAAAG,mBAAA,YAAAA,oBAAAC,KAAA,EAA6B;EAAA,I;;;iCAIlCX,cAAA;IAAAA,cAAA,GAAAY,oBAAA,sBAAAA,oBAAA;;IAGEC,MAAA,CAAAC,KAAA;IACA;MACED,MAAA,CAAAE,OAAA;;;;;EAUH;EAED,IAAAC,OAAA,GAAAlB,qBAAA,CAAAC,OAAA,EAAAC,cAAA;;;;IAIsBiB,KAAA,EAAAJ;;AAGvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}