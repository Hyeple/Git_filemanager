{"ast":null,"code":"import _classCallCheck from \"C:/Users/parkj/Desktop/nginx-file-browser-master/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/parkj/Desktop/nginx-file-browser-master/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/parkj/Desktop/nginx-file-browser-master/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/parkj/Desktop/nginx-file-browser-master/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { difference, replaceAt } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { QueryObserver } from './queryObserver.mjs';\nimport { Subscribable } from './subscribable.mjs';\nvar QueriesObserver = /*#__PURE__*/function (_Subscribable) {\n  _inherits(QueriesObserver, _Subscribable);\n  var _super = _createSuper(QueriesObserver);\n  function QueriesObserver(client, queries) {\n    var _this;\n    _classCallCheck(this, QueriesObserver);\n    _this = _super.call(this);\n    _this.client = client;\n    _this.queries = [];\n    _this.result = [];\n    _this.observers = [];\n    _this.observersMap = {};\n    if (queries) {\n      _this.setQueries(queries);\n    }\n    return _this;\n  }\n  _createClass(QueriesObserver, [{\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      var _this2 = this;\n      if (this.listeners.length === 1) {\n        this.observers.forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _this2.onUpdate(observer, result);\n          });\n        });\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.listeners.length) {\n        this.destroy();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.listeners = [];\n      this.observers.forEach(function (observer) {\n        observer.destroy();\n      });\n    }\n  }, {\n    key: \"setQueries\",\n    value: function setQueries(queries, notifyOptions) {\n      var _this3 = this;\n      this.queries = queries;\n      notifyManager.batch(function () {\n        var prevObservers = _this3.observers;\n        var newObserverMatches = _this3.findMatchingObservers(_this3.queries); // set options for the new observers to notify of changes\n\n        newObserverMatches.forEach(function (match) {\n          return match.observer.setOptions(match.defaultedQueryOptions, notifyOptions);\n        });\n        var newObservers = newObserverMatches.map(function (match) {\n          return match.observer;\n        });\n        var newObserversMap = Object.fromEntries(newObservers.map(function (observer) {\n          return [observer.options.queryHash, observer];\n        }));\n        var newResult = newObservers.map(function (observer) {\n          return observer.getCurrentResult();\n        });\n        var hasIndexChange = newObservers.some(function (observer, index) {\n          return observer !== prevObservers[index];\n        });\n        if (prevObservers.length === newObservers.length && !hasIndexChange) {\n          return;\n        }\n        _this3.observers = newObservers;\n        _this3.observersMap = newObserversMap;\n        _this3.result = newResult;\n        if (!_this3.hasListeners()) {\n          return;\n        }\n        difference(prevObservers, newObservers).forEach(function (observer) {\n          observer.destroy();\n        });\n        difference(newObservers, prevObservers).forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _this3.onUpdate(observer, result);\n          });\n        });\n        _this3.notify();\n      });\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return this.result;\n    }\n  }, {\n    key: \"getQueries\",\n    value: function getQueries() {\n      return this.observers.map(function (observer) {\n        return observer.getCurrentQuery();\n      });\n    }\n  }, {\n    key: \"getObservers\",\n    value: function getObservers() {\n      return this.observers;\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(queries) {\n      return this.findMatchingObservers(queries).map(function (match) {\n        return match.observer.getOptimisticResult(match.defaultedQueryOptions);\n      });\n    }\n  }, {\n    key: \"findMatchingObservers\",\n    value: function findMatchingObservers(queries) {\n      var _this4 = this;\n      var prevObservers = this.observers;\n      var prevObserversMap = new Map(prevObservers.map(function (observer) {\n        return [observer.options.queryHash, observer];\n      }));\n      var defaultedQueryOptions = queries.map(function (options) {\n        return _this4.client.defaultQueryOptions(options);\n      });\n      var matchingObservers = defaultedQueryOptions.flatMap(function (defaultedOptions) {\n        var match = prevObserversMap.get(defaultedOptions.queryHash);\n        if (match != null) {\n          return [{\n            defaultedQueryOptions: defaultedOptions,\n            observer: match\n          }];\n        }\n        return [];\n      });\n      var matchedQueryHashes = new Set(matchingObservers.map(function (match) {\n        return match.defaultedQueryOptions.queryHash;\n      }));\n      var unmatchedQueries = defaultedQueryOptions.filter(function (defaultedOptions) {\n        return !matchedQueryHashes.has(defaultedOptions.queryHash);\n      });\n      var matchingObserversSet = new Set(matchingObservers.map(function (match) {\n        return match.observer;\n      }));\n      var unmatchedObservers = prevObservers.filter(function (prevObserver) {\n        return !matchingObserversSet.has(prevObserver);\n      });\n      var getObserver = function getObserver(options) {\n        var defaultedOptions = _this4.client.defaultQueryOptions(options);\n        var currentObserver = _this4.observersMap[defaultedOptions.queryHash];\n        return currentObserver != null ? currentObserver : new QueryObserver(_this4.client, defaultedOptions);\n      };\n      var newOrReusedObservers = unmatchedQueries.map(function (options, index) {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          var previouslyUsedObserver = unmatchedObservers[index];\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver\n            };\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options)\n        };\n      });\n      var sortMatchesByOrderOfQueries = function sortMatchesByOrderOfQueries(a, b) {\n        return defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n      };\n      return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n    }\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(observer, result) {\n      var index = this.observers.indexOf(observer);\n      if (index !== -1) {\n        this.result = replaceAt(this.result, index, result);\n        this.notify();\n      }\n    }\n  }, {\n    key: \"notify\",\n    value: function notify() {\n      var _this5 = this;\n      notifyManager.batch(function () {\n        _this5.listeners.forEach(function (listener) {\n          listener(_this5.result);\n        });\n      });\n    }\n  }]);\n  return QueriesObserver;\n}(Subscribable);\nexport { QueriesObserver };","map":{"version":3,"names":["QueriesObserver","_Subscribable","_inherits","_super","_createSuper","client","queries","_this","_classCallCheck","call","result","observers","observersMap","setQueries","_createClass","key","value","onSubscribe","_this2","listeners","length","forEach","observer","subscribe","onUpdate","onUnsubscribe","destroy","notifyOptions","_this3","notifyManager","batch","prevObservers","newObserverMatches","findMatchingObservers","match","setOptions","defaultedQueryOptions","newObservers","map","newObserversMap","Object","fromEntries","options","queryHash","newResult","getCurrentResult","hasIndexChange","some","index","hasListeners","difference","notify","getQueries","getCurrentQuery","getObservers","getOptimisticResult","_this4","prevObserversMap","Map","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","get","matchedQueryHashes","Set","unmatchedQueries","filter","has","matchingObserversSet","unmatchedObservers","prevObserver","getObserver","currentObserver","QueryObserver","newOrReusedObservers","keepPreviousData","previouslyUsedObserver","undefined","sortMatchesByOrderOfQueries","a","b","indexOf","concat","sort","replaceAt","_this5","listener","Subscribable"],"sources":["C:\\Users\\parkj\\Desktop\\nginx-file-browser-master\\frontend\\node_modules\\@tanstack\\query-core\\src\\queriesObserver.ts"],"sourcesContent":["import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  QueryObserverOptions,\n  QueryObserverResult,\n  DefaultedQueryObserverOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.observers\n\n      const newObserverMatches = this.findMatchingObservers(this.queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newObserversMap = Object.fromEntries(\n        newObservers.map((observer) => [observer.options.queryHash, observer]),\n      )\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getQueries() {\n    return this.observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.observers\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return this.findMatchingObservers(queries).map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n  }\n\n  private findMatchingObservers(\n    queries: QueryObserverOptions[],\n  ): QueryObserverMatch[] {\n    const prevObservers = this.observers\n    const prevObserversMap = new Map(\n      prevObservers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const defaultedQueryOptions = queries.map((options) =>\n      this.client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: QueryObserverMatch[] =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObserversMap.get(defaultedOptions.queryHash)\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = new Set(\n      matchingObservers.map((match) => match.defaultedQueryOptions.queryHash),\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) => !matchedQueryHashes.has(defaultedOptions.queryHash),\n    )\n\n    const matchingObserversSet = new Set(\n      matchingObservers.map((match) => match.observer),\n    )\n    const unmatchedObservers = prevObservers.filter(\n      (prevObserver) => !matchingObserversSet.has(prevObserver),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.client.defaultQueryOptions(options)\n      const currentObserver = this.observersMap[defaultedOptions.queryHash!]\n      return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n    }\n\n    const newOrReusedObservers: QueryObserverMatch[] = unmatchedQueries.map(\n      (options, index) => {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          const previouslyUsedObserver = unmatchedObservers[index]\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver,\n            }\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      },\n    )\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(this.result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}