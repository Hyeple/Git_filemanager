{"ast":null,"code":"import { getArrowOffset } from '../style/placementArrow';\nexport function getOverflowOptions(placement, arrowOffset, arrowWidth, autoAdjustOverflow) {\n  if (autoAdjustOverflow === false) {\n    return {\n      adjustX: false,\n      adjustY: false\n    };\n  }\n  var overflow = autoAdjustOverflow && typeof autoAdjustOverflow === 'object' ? autoAdjustOverflow : {};\n  var baseOverflow = {};\n  switch (placement) {\n    case 'top':\n    case 'bottom':\n      baseOverflow.shiftX = arrowOffset.dropdownArrowOffset * 2 + arrowWidth;\n      break;\n    case 'left':\n    case 'right':\n      baseOverflow.shiftY = arrowOffset.dropdownArrowOffsetVertical * 2 + arrowWidth;\n      break;\n  }\n  var mergedOverflow = Object.assign(Object.assign({}, baseOverflow), overflow);\n  // Support auto shift\n  if (!mergedOverflow.shiftX) {\n    mergedOverflow.adjustX = true;\n  }\n  if (!mergedOverflow.shiftY) {\n    mergedOverflow.adjustY = true;\n  }\n  return mergedOverflow;\n}\nvar PlacementAlignMap = {\n  left: {\n    points: ['cr', 'cl']\n  },\n  right: {\n    points: ['cl', 'cr']\n  },\n  top: {\n    points: ['bc', 'tc']\n  },\n  bottom: {\n    points: ['tc', 'bc']\n  },\n  topLeft: {\n    points: ['bl', 'tl']\n  },\n  leftTop: {\n    points: ['tr', 'tl']\n  },\n  topRight: {\n    points: ['br', 'tr']\n  },\n  rightTop: {\n    points: ['tl', 'tr']\n  },\n  bottomRight: {\n    points: ['tr', 'br']\n  },\n  rightBottom: {\n    points: ['bl', 'br']\n  },\n  bottomLeft: {\n    points: ['tl', 'bl']\n  },\n  leftBottom: {\n    points: ['br', 'bl']\n  }\n};\nvar ArrowCenterPlacementAlignMap = {\n  topLeft: {\n    points: ['bl', 'tc']\n  },\n  leftTop: {\n    points: ['tr', 'cl']\n  },\n  topRight: {\n    points: ['br', 'tc']\n  },\n  rightTop: {\n    points: ['tl', 'cr']\n  },\n  bottomRight: {\n    points: ['tr', 'bc']\n  },\n  rightBottom: {\n    points: ['bl', 'cr']\n  },\n  bottomLeft: {\n    points: ['tl', 'bc']\n  },\n  leftBottom: {\n    points: ['br', 'cl']\n  }\n};\nvar DisableAutoArrowList = new Set(['topLeft', 'topRight', 'bottomLeft', 'bottomRight', 'leftTop', 'leftBottom', 'rightTop', 'rightBottom']);\nexport default function getPlacements(config) {\n  var arrowWidth = config.arrowWidth,\n    autoAdjustOverflow = config.autoAdjustOverflow,\n    arrowPointAtCenter = config.arrowPointAtCenter,\n    offset = config.offset,\n    borderRadius = config.borderRadius;\n  var halfArrowWidth = arrowWidth / 2;\n  var placementMap = {};\n  Object.keys(PlacementAlignMap).forEach(function (key) {\n    var template = arrowPointAtCenter && ArrowCenterPlacementAlignMap[key] || PlacementAlignMap[key];\n    var placementInfo = Object.assign(Object.assign({}, template), {\n      offset: [0, 0]\n    });\n    placementMap[key] = placementInfo;\n    // Disable autoArrow since design is fixed position\n    if (DisableAutoArrowList.has(key)) {\n      placementInfo.autoArrow = false;\n    }\n    // Static offset\n    switch (key) {\n      case 'top':\n      case 'topLeft':\n      case 'topRight':\n        placementInfo.offset[1] = -halfArrowWidth - offset;\n        break;\n      case 'bottom':\n      case 'bottomLeft':\n      case 'bottomRight':\n        placementInfo.offset[1] = halfArrowWidth + offset;\n        break;\n      case 'left':\n      case 'leftTop':\n      case 'leftBottom':\n        placementInfo.offset[0] = -halfArrowWidth - offset;\n        break;\n      case 'right':\n      case 'rightTop':\n      case 'rightBottom':\n        placementInfo.offset[0] = halfArrowWidth + offset;\n        break;\n    }\n    // Dynamic offset\n    var arrowOffset = getArrowOffset({\n      contentRadius: borderRadius,\n      limitVerticalRadius: true\n    });\n    if (arrowPointAtCenter) {\n      switch (key) {\n        case 'topLeft':\n        case 'bottomLeft':\n          placementInfo.offset[0] = -arrowOffset.dropdownArrowOffset - halfArrowWidth;\n          break;\n        case 'topRight':\n        case 'bottomRight':\n          placementInfo.offset[0] = arrowOffset.dropdownArrowOffset + halfArrowWidth;\n          break;\n        case 'leftTop':\n        case 'rightTop':\n          placementInfo.offset[1] = -arrowOffset.dropdownArrowOffset - halfArrowWidth;\n          break;\n        case 'leftBottom':\n        case 'rightBottom':\n          placementInfo.offset[1] = arrowOffset.dropdownArrowOffset + halfArrowWidth;\n          break;\n      }\n    }\n    // Overflow\n    placementInfo.overflow = getOverflowOptions(key, arrowOffset, arrowWidth, autoAdjustOverflow);\n  });\n  return placementMap;\n}","map":{"version":3,"names":["getArrowOffset","getOverflowOptions","placement","arrowOffset","arrowWidth","autoAdjustOverflow","adjustX","adjustY","overflow","baseOverflow","shiftX","dropdownArrowOffset","shiftY","dropdownArrowOffsetVertical","mergedOverflow","Object","assign","PlacementAlignMap","left","points","right","top","bottom","topLeft","leftTop","topRight","rightTop","bottomRight","rightBottom","bottomLeft","leftBottom","ArrowCenterPlacementAlignMap","DisableAutoArrowList","Set","getPlacements","config","arrowPointAtCenter","offset","borderRadius","halfArrowWidth","placementMap","keys","forEach","key","template","placementInfo","has","autoArrow","contentRadius","limitVerticalRadius"],"sources":["C:/Users/parkj/Desktop/OSS/Git_filemanager/frontend/node_modules/antd/es/_util/placements.js"],"sourcesContent":["import { getArrowOffset } from '../style/placementArrow';\r\nexport function getOverflowOptions(placement, arrowOffset, arrowWidth, autoAdjustOverflow) {\r\n  if (autoAdjustOverflow === false) {\r\n    return {\r\n      adjustX: false,\r\n      adjustY: false\r\n    };\r\n  }\r\n  const overflow = autoAdjustOverflow && typeof autoAdjustOverflow === 'object' ? autoAdjustOverflow : {};\r\n  const baseOverflow = {};\r\n  switch (placement) {\r\n    case 'top':\r\n    case 'bottom':\r\n      baseOverflow.shiftX = arrowOffset.dropdownArrowOffset * 2 + arrowWidth;\r\n      break;\r\n    case 'left':\r\n    case 'right':\r\n      baseOverflow.shiftY = arrowOffset.dropdownArrowOffsetVertical * 2 + arrowWidth;\r\n      break;\r\n  }\r\n  const mergedOverflow = Object.assign(Object.assign({}, baseOverflow), overflow);\r\n  // Support auto shift\r\n  if (!mergedOverflow.shiftX) {\r\n    mergedOverflow.adjustX = true;\r\n  }\r\n  if (!mergedOverflow.shiftY) {\r\n    mergedOverflow.adjustY = true;\r\n  }\r\n  return mergedOverflow;\r\n}\r\nconst PlacementAlignMap = {\r\n  left: {\r\n    points: ['cr', 'cl']\r\n  },\r\n  right: {\r\n    points: ['cl', 'cr']\r\n  },\r\n  top: {\r\n    points: ['bc', 'tc']\r\n  },\r\n  bottom: {\r\n    points: ['tc', 'bc']\r\n  },\r\n  topLeft: {\r\n    points: ['bl', 'tl']\r\n  },\r\n  leftTop: {\r\n    points: ['tr', 'tl']\r\n  },\r\n  topRight: {\r\n    points: ['br', 'tr']\r\n  },\r\n  rightTop: {\r\n    points: ['tl', 'tr']\r\n  },\r\n  bottomRight: {\r\n    points: ['tr', 'br']\r\n  },\r\n  rightBottom: {\r\n    points: ['bl', 'br']\r\n  },\r\n  bottomLeft: {\r\n    points: ['tl', 'bl']\r\n  },\r\n  leftBottom: {\r\n    points: ['br', 'bl']\r\n  }\r\n};\r\nconst ArrowCenterPlacementAlignMap = {\r\n  topLeft: {\r\n    points: ['bl', 'tc']\r\n  },\r\n  leftTop: {\r\n    points: ['tr', 'cl']\r\n  },\r\n  topRight: {\r\n    points: ['br', 'tc']\r\n  },\r\n  rightTop: {\r\n    points: ['tl', 'cr']\r\n  },\r\n  bottomRight: {\r\n    points: ['tr', 'bc']\r\n  },\r\n  rightBottom: {\r\n    points: ['bl', 'cr']\r\n  },\r\n  bottomLeft: {\r\n    points: ['tl', 'bc']\r\n  },\r\n  leftBottom: {\r\n    points: ['br', 'cl']\r\n  }\r\n};\r\nconst DisableAutoArrowList = new Set(['topLeft', 'topRight', 'bottomLeft', 'bottomRight', 'leftTop', 'leftBottom', 'rightTop', 'rightBottom']);\r\nexport default function getPlacements(config) {\r\n  const {\r\n    arrowWidth,\r\n    autoAdjustOverflow,\r\n    arrowPointAtCenter,\r\n    offset,\r\n    borderRadius\r\n  } = config;\r\n  const halfArrowWidth = arrowWidth / 2;\r\n  const placementMap = {};\r\n  Object.keys(PlacementAlignMap).forEach(key => {\r\n    const template = arrowPointAtCenter && ArrowCenterPlacementAlignMap[key] || PlacementAlignMap[key];\r\n    const placementInfo = Object.assign(Object.assign({}, template), {\r\n      offset: [0, 0]\r\n    });\r\n    placementMap[key] = placementInfo;\r\n    // Disable autoArrow since design is fixed position\r\n    if (DisableAutoArrowList.has(key)) {\r\n      placementInfo.autoArrow = false;\r\n    }\r\n    // Static offset\r\n    switch (key) {\r\n      case 'top':\r\n      case 'topLeft':\r\n      case 'topRight':\r\n        placementInfo.offset[1] = -halfArrowWidth - offset;\r\n        break;\r\n      case 'bottom':\r\n      case 'bottomLeft':\r\n      case 'bottomRight':\r\n        placementInfo.offset[1] = halfArrowWidth + offset;\r\n        break;\r\n      case 'left':\r\n      case 'leftTop':\r\n      case 'leftBottom':\r\n        placementInfo.offset[0] = -halfArrowWidth - offset;\r\n        break;\r\n      case 'right':\r\n      case 'rightTop':\r\n      case 'rightBottom':\r\n        placementInfo.offset[0] = halfArrowWidth + offset;\r\n        break;\r\n    }\r\n    // Dynamic offset\r\n    const arrowOffset = getArrowOffset({\r\n      contentRadius: borderRadius,\r\n      limitVerticalRadius: true\r\n    });\r\n    if (arrowPointAtCenter) {\r\n      switch (key) {\r\n        case 'topLeft':\r\n        case 'bottomLeft':\r\n          placementInfo.offset[0] = -arrowOffset.dropdownArrowOffset - halfArrowWidth;\r\n          break;\r\n        case 'topRight':\r\n        case 'bottomRight':\r\n          placementInfo.offset[0] = arrowOffset.dropdownArrowOffset + halfArrowWidth;\r\n          break;\r\n        case 'leftTop':\r\n        case 'rightTop':\r\n          placementInfo.offset[1] = -arrowOffset.dropdownArrowOffset - halfArrowWidth;\r\n          break;\r\n        case 'leftBottom':\r\n        case 'rightBottom':\r\n          placementInfo.offset[1] = arrowOffset.dropdownArrowOffset + halfArrowWidth;\r\n          break;\r\n      }\r\n    }\r\n    // Overflow\r\n    placementInfo.overflow = getOverflowOptions(key, arrowOffset, arrowWidth, autoAdjustOverflow);\r\n  });\r\n  return placementMap;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}