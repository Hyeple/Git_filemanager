{"ast":null,"code":"import _slicedToArray from \"C:/Users/parkj/Desktop/OSS/Git_filemanager/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// Countdown\nvar timeUnits = [['Y', 1000 * 60 * 60 * 24 * 365], ['M', 1000 * 60 * 60 * 24 * 30], ['D', 1000 * 60 * 60 * 24], ['H', 1000 * 60 * 60], ['m', 1000 * 60], ['s', 1000], ['S', 1] // million seconds\n];\n\nexport function formatTimeStr(duration, format) {\n  var leftDuration = duration;\n  var escapeRegex = /\\[[^\\]]*]/g;\n  var keepList = (format.match(escapeRegex) || []).map(function (str) {\n    return str.slice(1, -1);\n  });\n  var templateText = format.replace(escapeRegex, '[]');\n  var replacedText = timeUnits.reduce(function (current, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      name = _ref2[0],\n      unit = _ref2[1];\n    if (current.includes(name)) {\n      var value = Math.floor(leftDuration / unit);\n      leftDuration -= value * unit;\n      return current.replace(new RegExp(\"\".concat(name, \"+\"), 'g'), function (match) {\n        var len = match.length;\n        return value.toString().padStart(len, '0');\n      });\n    }\n    return current;\n  }, templateText);\n  var index = 0;\n  return replacedText.replace(escapeRegex, function () {\n    var match = keepList[index];\n    index += 1;\n    return match;\n  });\n}\nexport function formatCountdown(value, config) {\n  var _config$format = config.format,\n    format = _config$format === void 0 ? '' : _config$format;\n  var target = new Date(value).getTime();\n  var current = Date.now();\n  var diff = Math.max(target - current, 0);\n  return formatTimeStr(diff, format);\n}","map":{"version":3,"names":["timeUnits","formatTimeStr","duration","format","leftDuration","escapeRegex","keepList","match","map","str","slice","templateText","replace","replacedText","reduce","current","_ref","_ref2","_slicedToArray","name","unit","includes","value","Math","floor","RegExp","concat","len","length","toString","padStart","index","formatCountdown","config","_config$format","target","Date","getTime","now","diff","max"],"sources":["C:/Users/parkj/Desktop/OSS/Git_filemanager/frontend/node_modules/antd/es/statistic/utils.js"],"sourcesContent":["// Countdown\r\nconst timeUnits = [['Y', 1000 * 60 * 60 * 24 * 365], ['M', 1000 * 60 * 60 * 24 * 30], ['D', 1000 * 60 * 60 * 24], ['H', 1000 * 60 * 60], ['m', 1000 * 60], ['s', 1000], ['S', 1] // million seconds\r\n];\r\n\r\nexport function formatTimeStr(duration, format) {\r\n  let leftDuration = duration;\r\n  const escapeRegex = /\\[[^\\]]*]/g;\r\n  const keepList = (format.match(escapeRegex) || []).map(str => str.slice(1, -1));\r\n  const templateText = format.replace(escapeRegex, '[]');\r\n  const replacedText = timeUnits.reduce((current, _ref) => {\r\n    let [name, unit] = _ref;\r\n    if (current.includes(name)) {\r\n      const value = Math.floor(leftDuration / unit);\r\n      leftDuration -= value * unit;\r\n      return current.replace(new RegExp(`${name}+`, 'g'), match => {\r\n        const len = match.length;\r\n        return value.toString().padStart(len, '0');\r\n      });\r\n    }\r\n    return current;\r\n  }, templateText);\r\n  let index = 0;\r\n  return replacedText.replace(escapeRegex, () => {\r\n    const match = keepList[index];\r\n    index += 1;\r\n    return match;\r\n  });\r\n}\r\nexport function formatCountdown(value, config) {\r\n  const {\r\n    format = ''\r\n  } = config;\r\n  const target = new Date(value).getTime();\r\n  const current = Date.now();\r\n  const diff = Math.max(target - current, 0);\r\n  return formatTimeStr(diff, format);\r\n}"],"mappings":";AAAA;AACA,IAAMA,SAAS,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AAAA,CAChL;;AAED,OAAO,SAASC,aAAaA,CAACC,QAAQ,EAAEC,MAAM,EAAE;EAC9C,IAAIC,YAAY,GAAGF,QAAQ;EAC3B,IAAMG,WAAW,GAAG,YAAY;EAChC,IAAMC,QAAQ,GAAG,CAACH,MAAM,CAACI,KAAK,CAACF,WAAW,CAAC,IAAI,EAAE,EAAEG,GAAG,CAAC,UAAAC,GAAG;IAAA,OAAIA,GAAG,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAAA,EAAC;EAC/E,IAAMC,YAAY,GAAGR,MAAM,CAACS,OAAO,CAACP,WAAW,EAAE,IAAI,CAAC;EACtD,IAAMQ,YAAY,GAAGb,SAAS,CAACc,MAAM,CAAC,UAACC,OAAO,EAAEC,IAAI,EAAK;IACvD,IAAAC,KAAA,GAAAC,cAAA,CAAmBF,IAAI;MAAlBG,IAAI,GAAAF,KAAA;MAAEG,IAAI,GAAAH,KAAA;IACf,IAAIF,OAAO,CAACM,QAAQ,CAACF,IAAI,CAAC,EAAE;MAC1B,IAAMG,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACpB,YAAY,GAAGgB,IAAI,CAAC;MAC7ChB,YAAY,IAAIkB,KAAK,GAAGF,IAAI;MAC5B,OAAOL,OAAO,CAACH,OAAO,CAAC,IAAIa,MAAM,IAAAC,MAAA,CAAIP,IAAI,QAAK,GAAG,CAAC,EAAE,UAAAZ,KAAK,EAAI;QAC3D,IAAMoB,GAAG,GAAGpB,KAAK,CAACqB,MAAM;QACxB,OAAON,KAAK,CAACO,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAACH,GAAG,EAAE,GAAG,CAAC;MAC5C,CAAC,CAAC;IACJ;IACA,OAAOZ,OAAO;EAChB,CAAC,EAAEJ,YAAY,CAAC;EAChB,IAAIoB,KAAK,GAAG,CAAC;EACb,OAAOlB,YAAY,CAACD,OAAO,CAACP,WAAW,EAAE,YAAM;IAC7C,IAAME,KAAK,GAAGD,QAAQ,CAACyB,KAAK,CAAC;IAC7BA,KAAK,IAAI,CAAC;IACV,OAAOxB,KAAK;EACd,CAAC,CAAC;AACJ;AACA,OAAO,SAASyB,eAAeA,CAACV,KAAK,EAAEW,MAAM,EAAE;EAC7C,IAAAC,cAAA,GAEID,MAAM,CADR9B,MAAM;IAANA,MAAM,GAAA+B,cAAA,cAAG,EAAE,GAAAA,cAAA;EAEb,IAAMC,MAAM,GAAG,IAAIC,IAAI,CAACd,KAAK,CAAC,CAACe,OAAO,CAAC,CAAC;EACxC,IAAMtB,OAAO,GAAGqB,IAAI,CAACE,GAAG,CAAC,CAAC;EAC1B,IAAMC,IAAI,GAAGhB,IAAI,CAACiB,GAAG,CAACL,MAAM,GAAGpB,OAAO,EAAE,CAAC,CAAC;EAC1C,OAAOd,aAAa,CAACsC,IAAI,EAAEpC,MAAM,CAAC;AACpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}