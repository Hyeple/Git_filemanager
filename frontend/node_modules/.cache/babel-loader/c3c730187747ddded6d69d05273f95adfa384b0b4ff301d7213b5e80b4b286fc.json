{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { shouldThrowError } from './utils.mjs';\nvar ensurePreventErrorBoundaryRetry = function ensurePreventErrorBoundaryRetry(options, errorResetBoundary) {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false;\n    }\n  }\n};\nvar useClearResetErrorBoundary = function useClearResetErrorBoundary(errorResetBoundary) {\n  React.useEffect(function () {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n};\nvar getHasError = function getHasError(_ref) {\n  var result = _ref.result,\n    errorResetBoundary = _ref.errorResetBoundary,\n    useErrorBoundary = _ref.useErrorBoundary,\n    query = _ref.query;\n  return result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(useErrorBoundary, [result.error, query]);\n};\nexport { ensurePreventErrorBoundaryRetry, getHasError, useClearResetErrorBoundary };","map":{"version":3,"names":["options","suspense","useErrorBoundary","errorResetBoundary","isReset","useClearResetErrorBoundary","clearReset","getHasError","_ref","query"],"sources":["C:\\Users\\parkj\\Desktop\\nginx-file-browser-master\\frontend\\node_modules\\@tanstack\\react-query\\src\\errorBoundaryUtils.ts"],"sourcesContent":["'use client'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  UseErrorBoundary,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  useErrorBoundary,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  useErrorBoundary: UseErrorBoundary<\n    TQueryFnData,\n    TError,\n    TQueryData,\n    TQueryKey\n  >\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(useErrorBoundary, [result.error, query])\n  )\n}\n"],"mappings":";;;;;EA4BE,IAAAA,OAAA,CAAAC,QAAA,IAAAD,OAAA,CAAAE,gBAAA;IACE;IACA,KAAAC,kBAAA,CAAAC,OAAA;;IAEC;EACF;AACF;AAEY,IAAAC,0BAAA,YAAAA,2BAAAF,kBAAA;;IAITA,kBAAA,CAAAG,UAAA;;AAEH;AAEM,IAAAC,WAAA,YAAAA,YAAAC,IAAA,EAML;EAAA,I;;;IAIAC,KAAA,GAAAD,IAAA,CAAAC,KAAA;;AAkBD"},"metadata":{},"sourceType":"module","externalDependencies":[]}