{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"C:/Users/parkj/Desktop/nginx-file-browser-master/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { parseFilterArgs, notifyManager } from '@tanstack/query-core';\nimport { useSyncExternalStore } from './useSyncExternalStore.mjs';\nimport { useQueryClient } from './QueryClientProvider.mjs';\nfunction useIsFetching(arg1, arg2, arg3) {\n  var _parseFilterArgs = parseFilterArgs(arg1, arg2, arg3),\n    _parseFilterArgs2 = _slicedToArray(_parseFilterArgs, 2),\n    filters = _parseFilterArgs2[0],\n    _parseFilterArgs2$ = _parseFilterArgs2[1],\n    options = _parseFilterArgs2$ === void 0 ? {} : _parseFilterArgs2$;\n  var queryClient = useQueryClient({\n    context: options.context\n  });\n  var queryCache = queryClient.getQueryCache();\n  return useSyncExternalStore(React.useCallback(function (onStoreChange) {\n    return queryCache.subscribe(notifyManager.batchCalls(onStoreChange));\n  }, [queryCache]), function () {\n    return queryClient.isFetching(filters);\n  }, function () {\n    return queryClient.isFetching(filters);\n  });\n}\nexport { useIsFetching };","map":{"version":3,"names":["useIsFetching","arg1","arg2","arg3","_parseFilterArgs","parseFilterArgs","_parseFilterArgs2","_slicedToArray","filters","_parseFilterArgs2$","options","queryCache","queryClient","getQueryCache","useSyncExternalStore","React","useCallback","onStoreChange","subscribe","notifyManager","batchCalls","isFetching"],"sources":["C:\\Users\\parkj\\Desktop\\nginx-file-browser-master\\frontend\\node_modules\\@tanstack\\react-query\\src\\useIsFetching.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport type { QueryKey, QueryFilters } from '@tanstack/query-core'\nimport { notifyManager, parseFilterArgs } from '@tanstack/query-core'\n\nimport { useSyncExternalStore } from './useSyncExternalStore'\nimport type { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsFetching(filters?: QueryFilters, options?: Options): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters,\n  options?: Options,\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseFilterArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n  const queryCache = queryClient.getQueryCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        queryCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [queryCache],\n    ),\n    () => queryClient.isFetching(filters),\n    () => queryClient.isFetching(filters),\n  )\n}\n"],"mappings":";;;;;;;AAiBO,SAAAA,cAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;EAKL,IAAAC,gBAAA,GAAAC,eAAA,CAAAJ,IAAA,EAAAC,IAAA,EAAAC,IAAA;IAAAG,iBAAA,GAAAC,cAAA,CAAAH,gBAAA;IAAAI,OAAA,GAAAF,iBAAA;IAAAG,kBAAA,GAAAH,iBAAA;IAAAI,OAAA,GAAAD,kBAAA,mBAAAA,kBAAA;;;EACmC;EACnC,IAAAE,UAAA,GAAAC,WAAA,CAAAC,aAAA;EAEA,OAAAC,oBAAA,CAAAC,KAAA,CAAAC,WAAA,WAAAC,aAAA;IAAA,OAAAN,UAAA,CAAAO,SAAA,CAAAC,aAAA,CAAAC,UAAA,CAAAH,aAAA;EAAA,IAAAN,UAAA;IAAA,OAAAC,WAAA,CAAAS,UAAA,CAAAb,OAAA;EAAA;IAAA,OAAAI,WAAA,CAAAS,UAAA,CAAAb,OAAA;EAAA;AASD"},"metadata":{},"sourceType":"module","externalDependencies":[]}