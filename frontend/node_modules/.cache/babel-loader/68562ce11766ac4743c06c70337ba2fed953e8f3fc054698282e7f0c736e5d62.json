{"ast":null,"code":"import { scheduleMicrotask } from './utils.mjs';\nfunction createNotifyManager() {\n  var queue = [];\n  var transactions = 0;\n  var notifyFn = function notifyFn(callback) {\n    callback();\n  };\n  var batchNotifyFn = function batchNotifyFn(callback) {\n    callback();\n  };\n  var batch = function batch(callback) {\n    var result;\n    transactions++;\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n      if (!transactions) {\n        flush();\n      }\n    }\n    return result;\n  };\n  var schedule = function schedule(callback) {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(function () {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n  var batchCalls = function batchCalls(callback) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      schedule(function () {\n        callback.apply(void 0, args);\n      });\n    };\n  };\n  var flush = function flush() {\n    var originalQueue = queue;\n    queue = [];\n    if (originalQueue.length) {\n      scheduleMicrotask(function () {\n        batchNotifyFn(function () {\n          originalQueue.forEach(function (callback) {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n  var setNotifyFunction = function setNotifyFunction(fn) {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n  var setBatchNotifyFunction = function setBatchNotifyFunction(fn) {\n    batchNotifyFn = fn;\n  };\n  return {\n    batch: batch,\n    batchCalls: batchCalls,\n    schedule: schedule,\n    setNotifyFunction: setNotifyFunction,\n    setBatchNotifyFunction: setBatchNotifyFunction\n  };\n} // SINGLETON\n\nvar notifyManager = createNotifyManager();\nexport { createNotifyManager, notifyManager };","map":{"version":3,"names":["createNotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","batch","result","flush","schedule","push","scheduleMicrotask","batchCalls","_len","arguments","length","args","Array","_key","apply","originalQueue","forEach","setNotifyFunction","fn","setBatchNotifyFunction","notifyManager"],"sources":["C:\\Users\\parkj\\Desktop\\nginx-file-browser-master\\frontend\\node_modules\\@tanstack\\query-core\\src\\notifyManager.ts"],"sourcesContent":["import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\nexport function createNotifyManager() {\n  let queue: NotifyCallback[] = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n\n  const batch = <T>(callback: () => T): T => {\n    let result\n    transactions++\n    try {\n      result = callback()\n    } finally {\n      transactions--\n      if (!transactions) {\n        flush()\n      }\n    }\n    return result\n  }\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  const batchCalls = <T extends Function>(callback: T): T => {\n    return ((...args: any[]) => {\n      schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  const setNotifyFunction = (fn: NotifyFunction) => {\n    notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  const setBatchNotifyFunction = (fn: BatchNotifyFunction) => {\n    batchNotifyFn = fn\n  }\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction,\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n"],"mappings":";AAUO,SAASA,mBAATA,CAAA,EAA+B;EACpC,IAAIC,KAAuB,GAAG,EAA9B;EACA,IAAIC,YAAY,GAAG,CAAnB;EACA,IAAIC,QAAwB,GAAI,SAAAA,SAAAC,QAAD,EAAc;IAC3CA,QAAQ;GADV;EAGA,IAAIC,aAAkC,GAAI,SAAAA,cAAAD,QAAD,EAA0B;IACjEA,QAAQ;GADV;EAIA,IAAME,KAAK,GAAO,SAAZA,KAAKA,CAAOF,QAAJ,EAA6B;IACzC,IAAIG,MAAJ;IACAL,YAAY;IACZ,IAAI;MACFK,MAAM,GAAGH,QAAQ,EAAjB;IACD,CAFD,SAEU;MACRF,YAAY;MACZ,IAAI,CAACA,YAAL,EAAmB;QACjBM,KAAK;MACN;IACF;IACD,OAAOD,MAAP;GAXF;EAcA,IAAME,QAAQ,GAAI,SAAZA,QAAQA,CAAIL,QAAD,EAAoC;IACnD,IAAIF,YAAJ,EAAkB;MAChBD,KAAK,CAACS,IAAN,CAAWN,QAAX;IACD,CAFD,MAEO;MACLO,iBAAiB,CAAC,YAAM;QACtBR,QAAQ,CAACC,QAAD,CAAR;MACD,CAFgB,CAAjB;IAGD;GAPH;EAUA;AACF;AACA;;EACE,IAAMQ,UAAU,GAAwB,SAAlCA,UAAUA,CAAwBR,QAArB,EAAwC;IACzD,OAAQ,YAAoB;MAAA,SAAAS,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAhBC,IAAJ,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAIF,IAAJ,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MACNT,QAAQ,CAAC,YAAM;QACbL,QAAQ,CAAAe,KAAA,SAAIH,IAAJ,CAAR;MACD,CAFO,CAAR;KADF;GADF;EAQA,IAAMR,KAAK,GAAG,SAARA,KAAKA,CAAA,EAAe;IACxB,IAAMY,aAAa,GAAGnB,KAAtB;IACAA,KAAK,GAAG,EAAR;IACA,IAAImB,aAAa,CAACL,MAAlB,EAA0B;MACxBJ,iBAAiB,CAAC,YAAM;QACtBN,aAAa,CAAC,YAAM;UAClBe,aAAa,CAACC,OAAd,CAAuB,UAAAjB,QAAD,EAAc;YAClCD,QAAQ,CAACC,QAAD,CAAR;WADF;QAGD,CAJY,CAAb;MAKD,CANgB,CAAjB;IAOD;GAXH;EAcA;AACF;AACA;AACA;;EACE,IAAMkB,iBAAiB,GAAI,SAArBA,iBAAiBA,CAAIC,EAAD,EAAwB;IAChDpB,QAAQ,GAAGoB,EAAX;GADF;EAIA;AACF;AACA;AACA;;EACE,IAAMC,sBAAsB,GAAI,SAA1BA,sBAAsBA,CAAID,EAAD,EAA6B;IAC1DlB,aAAa,GAAGkB,EAAhB;GADF;EAIA,OAAO;IACLjB,KADK,EACLA,KADK;IAELM,UAFK,EAELA,UAFK;IAGLH,QAHK,EAGLA,QAHK;IAILa,iBAJK,EAILA,iBAJK;IAKLE,sBAAA,EAAAA;GALF;AAOD;;AAGY,IAAAC,aAAa,GAAGzB,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}