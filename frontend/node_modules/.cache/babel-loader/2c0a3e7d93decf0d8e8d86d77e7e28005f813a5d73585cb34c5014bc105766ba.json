{"ast":null,"code":"import _toConsumableArray from \"C:/Users/parkj/Desktop/nginx-file-browser-master/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { isArray, isPlainObject } from 'is-what';\nfunction assignProp(carry, key, newVal, originalObject, includeNonenumerable) {\n  var propType = {}.propertyIsEnumerable.call(originalObject, key) ? 'enumerable' : 'nonenumerable';\n  if (propType === 'enumerable') carry[key] = newVal;\n  if (includeNonenumerable && propType === 'nonenumerable') {\n    Object.defineProperty(carry, key, {\n      value: newVal,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    });\n  }\n}\n/**\r\n * Copy (clone) an object and all its props recursively to get rid of any prop referenced of the original object. Arrays are also cloned, however objects inside arrays are still linked.\r\n *\r\n * @param target Target can be anything\r\n * @param [options = {}] Options can be `props` or `nonenumerable`\r\n * @returns the target with replaced values\r\n */\nfunction copy(target) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (isArray(target)) {\n    return target.map(function (item) {\n      return copy(item, options);\n    });\n  }\n  if (!isPlainObject(target)) {\n    return target;\n  }\n  var props = Object.getOwnPropertyNames(target);\n  var symbols = Object.getOwnPropertySymbols(target);\n  return [].concat(_toConsumableArray(props), _toConsumableArray(symbols)).reduce(function (carry, key) {\n    if (isArray(options.props) && !options.props.includes(key)) {\n      return carry;\n    }\n    var val = target[key];\n    var newVal = copy(val, options);\n    assignProp(carry, key, newVal, target, options.nonenumerable);\n    return carry;\n  }, {});\n}\nexport { copy };","map":{"version":3,"names":["isArray","isPlainObject","assignProp","carry","key","newVal","originalObject","includeNonenumerable","propType","propertyIsEnumerable","call","Object","defineProperty","value","enumerable","writable","configurable","copy","target","options","arguments","length","undefined","map","item","props","getOwnPropertyNames","symbols","getOwnPropertySymbols","concat","_toConsumableArray","reduce","includes","val","nonenumerable"],"sources":["C:/Users/parkj/Desktop/nginx-file-browser-master/frontend/node_modules/copy-anything/dist/index.es.js"],"sourcesContent":["import { isArray, isPlainObject } from 'is-what';\n\nfunction assignProp(carry, key, newVal, originalObject, includeNonenumerable) {\r\n    const propType = {}.propertyIsEnumerable.call(originalObject, key)\r\n        ? 'enumerable'\r\n        : 'nonenumerable';\r\n    if (propType === 'enumerable')\r\n        carry[key] = newVal;\r\n    if (includeNonenumerable && propType === 'nonenumerable') {\r\n        Object.defineProperty(carry, key, {\r\n            value: newVal,\r\n            enumerable: false,\r\n            writable: true,\r\n            configurable: true,\r\n        });\r\n    }\r\n}\r\n/**\r\n * Copy (clone) an object and all its props recursively to get rid of any prop referenced of the original object. Arrays are also cloned, however objects inside arrays are still linked.\r\n *\r\n * @param target Target can be anything\r\n * @param [options = {}] Options can be `props` or `nonenumerable`\r\n * @returns the target with replaced values\r\n */\r\nfunction copy(target, options = {}) {\r\n    if (isArray(target)) {\r\n        return target.map((item) => copy(item, options));\r\n    }\r\n    if (!isPlainObject(target)) {\r\n        return target;\r\n    }\r\n    const props = Object.getOwnPropertyNames(target);\r\n    const symbols = Object.getOwnPropertySymbols(target);\r\n    return [...props, ...symbols].reduce((carry, key) => {\r\n        if (isArray(options.props) && !options.props.includes(key)) {\r\n            return carry;\r\n        }\r\n        const val = target[key];\r\n        const newVal = copy(val, options);\r\n        assignProp(carry, key, newVal, target, options.nonenumerable);\r\n        return carry;\r\n    }, {});\r\n}\n\nexport { copy };\n"],"mappings":";AAAA,SAASA,OAAO,EAAEC,aAAa,QAAQ,SAAS;AAEhD,SAASC,UAAUA,CAACC,KAAK,EAAEC,GAAG,EAAEC,MAAM,EAAEC,cAAc,EAAEC,oBAAoB,EAAE;EAC1E,IAAMC,QAAQ,GAAG,CAAC,CAAC,CAACC,oBAAoB,CAACC,IAAI,CAACJ,cAAc,EAAEF,GAAG,CAAC,GAC5D,YAAY,GACZ,eAAe;EACrB,IAAII,QAAQ,KAAK,YAAY,EACzBL,KAAK,CAACC,GAAG,CAAC,GAAGC,MAAM;EACvB,IAAIE,oBAAoB,IAAIC,QAAQ,KAAK,eAAe,EAAE;IACtDG,MAAM,CAACC,cAAc,CAACT,KAAK,EAAEC,GAAG,EAAE;MAC9BS,KAAK,EAAER,MAAM;MACbS,UAAU,EAAE,KAAK;MACjBC,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE;IAClB,CAAC,CAAC;EACN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAIA,CAACC,MAAM,EAAgB;EAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC9B,IAAIpB,OAAO,CAACkB,MAAM,CAAC,EAAE;IACjB,OAAOA,MAAM,CAACK,GAAG,CAAC,UAACC,IAAI;MAAA,OAAKP,IAAI,CAACO,IAAI,EAAEL,OAAO,CAAC;IAAA,EAAC;EACpD;EACA,IAAI,CAAClB,aAAa,CAACiB,MAAM,CAAC,EAAE;IACxB,OAAOA,MAAM;EACjB;EACA,IAAMO,KAAK,GAAGd,MAAM,CAACe,mBAAmB,CAACR,MAAM,CAAC;EAChD,IAAMS,OAAO,GAAGhB,MAAM,CAACiB,qBAAqB,CAACV,MAAM,CAAC;EACpD,OAAO,GAAAW,MAAA,CAAAC,kBAAA,CAAIL,KAAK,GAAAK,kBAAA,CAAKH,OAAO,GAAEI,MAAM,CAAC,UAAC5B,KAAK,EAAEC,GAAG,EAAK;IACjD,IAAIJ,OAAO,CAACmB,OAAO,CAACM,KAAK,CAAC,IAAI,CAACN,OAAO,CAACM,KAAK,CAACO,QAAQ,CAAC5B,GAAG,CAAC,EAAE;MACxD,OAAOD,KAAK;IAChB;IACA,IAAM8B,GAAG,GAAGf,MAAM,CAACd,GAAG,CAAC;IACvB,IAAMC,MAAM,GAAGY,IAAI,CAACgB,GAAG,EAAEd,OAAO,CAAC;IACjCjB,UAAU,CAACC,KAAK,EAAEC,GAAG,EAAEC,MAAM,EAAEa,MAAM,EAAEC,OAAO,CAACe,aAAa,CAAC;IAC7D,OAAO/B,KAAK;EAChB,CAAC,EAAE,CAAC,CAAC,CAAC;AACV;AAEA,SAASc,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}