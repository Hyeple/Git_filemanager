{"ast":null,"code":"export var escapeKey = function escapeKey(key) {\n  return key.replace(/\\./g, '\\\\.');\n};\nexport var stringifyPath = function stringifyPath(path) {\n  return path.map(String).map(escapeKey).join('.');\n};\nexport var parsePath = function parsePath(string) {\n  var result = [];\n  var segment = '';\n  for (var i = 0; i < string.length; i++) {\n    var char = string.charAt(i);\n    var isEscapedDot = char === '\\\\' && string.charAt(i + 1) === '.';\n    if (isEscapedDot) {\n      segment += '.';\n      i++;\n      continue;\n    }\n    var isEndOfSegment = char === '.';\n    if (isEndOfSegment) {\n      result.push(segment);\n      segment = '';\n      continue;\n    }\n    segment += char;\n  }\n  var lastSegment = segment;\n  result.push(lastSegment);\n  return result;\n};","map":{"version":3,"names":["escapeKey","key","replace","stringifyPath","path","map","String","join","parsePath","string","result","segment","i","length","char","charAt","isEscapedDot","isEndOfSegment","push","lastSegment"],"sources":["C:\\Users\\parkj\\Desktop\\OSS\\Git_filemanager\\frontend\\node_modules\\superjson\\src\\pathstringifier.ts"],"sourcesContent":["export type StringifiedPath = string;\r\ntype Path = string[];\r\n\r\nexport const escapeKey = (key: string) => key.replace(/\\./g, '\\\\.');\r\n\r\nexport const stringifyPath = (path: Path): StringifiedPath =>\r\n  path\r\n    .map(String)\r\n    .map(escapeKey)\r\n    .join('.');\r\n\r\nexport const parsePath = (string: StringifiedPath) => {\r\n  const result: string[] = [];\r\n\r\n  let segment = '';\r\n  for (let i = 0; i < string.length; i++) {\r\n    let char = string.charAt(i);\r\n\r\n    const isEscapedDot = char === '\\\\' && string.charAt(i + 1) === '.';\r\n    if (isEscapedDot) {\r\n      segment += '.';\r\n      i++;\r\n      continue;\r\n    }\r\n\r\n    const isEndOfSegment = char === '.';\r\n    if (isEndOfSegment) {\r\n      result.push(segment);\r\n      segment = '';\r\n      continue;\r\n    }\r\n\r\n    segment += char;\r\n  }\r\n\r\n  const lastSegment = segment;\r\n  result.push(lastSegment);\r\n\r\n  return result;\r\n};\r\n"],"mappings":"AAGA,OAAO,IAAMA,SAAS,GAAG,SAAZA,SAASA,CAAIC,GAAW;EAAK,OAAAA,GAAG,CAACC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;AAAzB,CAAyB;AAEnE,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,IAAU;EACtC,OAAAA,IAAI,CACDC,GAAG,CAACC,MAAM,CAAC,CACXD,GAAG,CAACL,SAAS,CAAC,CACdO,IAAI,CAAC,GAAG,CAAC;AAHZ,CAGY;AAEd,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAIC,MAAuB;EAC/C,IAAMC,MAAM,GAAa,EAAE;EAE3B,IAAIC,OAAO,GAAG,EAAE;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC,IAAIE,IAAI,GAAGL,MAAM,CAACM,MAAM,CAACH,CAAC,CAAC;IAE3B,IAAMI,YAAY,GAAGF,IAAI,KAAK,IAAI,IAAIL,MAAM,CAACM,MAAM,CAACH,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG;IAClE,IAAII,YAAY,EAAE;MAChBL,OAAO,IAAI,GAAG;MACdC,CAAC,EAAE;MACH;;IAGF,IAAMK,cAAc,GAAGH,IAAI,KAAK,GAAG;IACnC,IAAIG,cAAc,EAAE;MAClBP,MAAM,CAACQ,IAAI,CAACP,OAAO,CAAC;MACpBA,OAAO,GAAG,EAAE;MACZ;;IAGFA,OAAO,IAAIG,IAAI;;EAGjB,IAAMK,WAAW,GAAGR,OAAO;EAC3BD,MAAM,CAACQ,IAAI,CAACC,WAAW,CAAC;EAExB,OAAOT,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}