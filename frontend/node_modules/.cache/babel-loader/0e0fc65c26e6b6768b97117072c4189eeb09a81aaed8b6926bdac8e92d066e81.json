{"ast":null,"code":"import _objectSpread from \"C:/Users/parkj/Desktop/OSS/Git_filemanager/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/parkj/Desktop/OSS/Git_filemanager/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/parkj/Desktop/OSS/Git_filemanager/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/parkj/Desktop/OSS/Git_filemanager/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/parkj/Desktop/OSS/Git_filemanager/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getDefaultState } from './mutation.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { shallowEqualObjects } from './utils.mjs';\n\n// CLASS\nvar MutationObserver = /*#__PURE__*/function (_Subscribable) {\n  _inherits(MutationObserver, _Subscribable);\n  var _super = _createSuper(MutationObserver);\n  function MutationObserver(client, options) {\n    var _this;\n    _classCallCheck(this, MutationObserver);\n    _this = _super.call(this);\n    _this.client = client;\n    _this.setOptions(options);\n    _this.bindMethods();\n    _this.updateResult();\n    return _this;\n  }\n  _createClass(MutationObserver, [{\n    key: \"bindMethods\",\n    value: function bindMethods() {\n      this.mutate = this.mutate.bind(this);\n      this.reset = this.reset.bind(this);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      var _this$currentMutation;\n      var prevOptions = this.options;\n      this.options = this.client.defaultMutationOptions(options);\n      if (!shallowEqualObjects(prevOptions, this.options)) {\n        this.client.getMutationCache().notify({\n          type: 'observerOptionsUpdated',\n          mutation: this.currentMutation,\n          observer: this\n        });\n      }\n      (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.setOptions(this.options);\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.listeners.length) {\n        var _this$currentMutation2;\n        (_this$currentMutation2 = this.currentMutation) == null ? void 0 : _this$currentMutation2.removeObserver(this);\n      }\n    }\n  }, {\n    key: \"onMutationUpdate\",\n    value: function onMutationUpdate(action) {\n      this.updateResult(); // Determine which callbacks to trigger\n\n      var notifyOptions = {\n        listeners: true\n      };\n      if (action.type === 'success') {\n        notifyOptions.onSuccess = true;\n      } else if (action.type === 'error') {\n        notifyOptions.onError = true;\n      }\n      this.notify(notifyOptions);\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return this.currentResult;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.currentMutation = undefined;\n      this.updateResult();\n      this.notify({\n        listeners: true\n      });\n    }\n  }, {\n    key: \"mutate\",\n    value: function mutate(variables, options) {\n      this.mutateOptions = options;\n      if (this.currentMutation) {\n        this.currentMutation.removeObserver(this);\n      }\n      this.currentMutation = this.client.getMutationCache().build(this.client, _objectSpread(_objectSpread({}, this.options), {}, {\n        variables: typeof variables !== 'undefined' ? variables : this.options.variables\n      }));\n      this.currentMutation.addObserver(this);\n      return this.currentMutation.execute();\n    }\n  }, {\n    key: \"updateResult\",\n    value: function updateResult() {\n      var state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n      var result = _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: state.status === 'loading',\n        isSuccess: state.status === 'success',\n        isError: state.status === 'error',\n        isIdle: state.status === 'idle',\n        mutate: this.mutate,\n        reset: this.reset\n      });\n      this.currentResult = result;\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(options) {\n      var _this2 = this;\n      notifyManager.batch(function () {\n        // First trigger the mutate callbacks\n        if (_this2.mutateOptions && _this2.hasListeners()) {\n          if (options.onSuccess) {\n            var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n            (_this$mutateOptions$o = (_this$mutateOptions = _this2.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, _this2.currentResult.data, _this2.currentResult.variables, _this2.currentResult.context);\n            (_this$mutateOptions$o2 = (_this$mutateOptions2 = _this2.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, _this2.currentResult.data, null, _this2.currentResult.variables, _this2.currentResult.context);\n          } else if (options.onError) {\n            var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n            (_this$mutateOptions$o3 = (_this$mutateOptions3 = _this2.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, _this2.currentResult.error, _this2.currentResult.variables, _this2.currentResult.context);\n            (_this$mutateOptions$o4 = (_this$mutateOptions4 = _this2.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, _this2.currentResult.error, _this2.currentResult.variables, _this2.currentResult.context);\n          }\n        } // Then trigger the listeners\n\n        if (options.listeners) {\n          _this2.listeners.forEach(function (listener) {\n            listener(_this2.currentResult);\n          });\n        }\n      });\n    }\n  }]);\n  return MutationObserver;\n}(Subscribable);\nexport { MutationObserver };","map":{"version":3,"names":["MutationObserver","_Subscribable","_inherits","_super","_createSuper","client","options","_this","_classCallCheck","call","setOptions","bindMethods","updateResult","_createClass","key","value","mutate","bind","reset","_this$currentMutation","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","currentMutation","observer","onUnsubscribe","listeners","length","_this$currentMutation2","removeObserver","onMutationUpdate","action","notifyOptions","onSuccess","onError","getCurrentResult","currentResult","undefined","variables","mutateOptions","build","_objectSpread","addObserver","execute","state","getDefaultState","result","isLoading","status","isSuccess","isError","isIdle","_this2","notifyManager","batch","hasListeners","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","data","context","onSettled","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","error","forEach","listener","Subscribable"],"sources":["C:\\Users\\parkj\\Desktop\\OSS\\Git_filemanager\\frontend\\node_modules\\@tanstack\\query-core\\src\\mutationObserver.ts"],"sourcesContent":["import type { Action, Mutation } from './mutation'\nimport { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\nimport { shallowEqualObjects } from './utils'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}