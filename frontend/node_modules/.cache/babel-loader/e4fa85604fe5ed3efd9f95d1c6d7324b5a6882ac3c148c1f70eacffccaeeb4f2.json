{"ast":null,"code":"import _defineProperty from \"C:/Users/parkj/Desktop/OSS/Git_filemanager/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toArray from \"C:/Users/parkj/Desktop/OSS/Git_filemanager/frontend/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _slicedToArray from \"C:/Users/parkj/Desktop/OSS/Git_filemanager/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport classNames from 'classnames';\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport * as React from 'react';\nimport { useCallback, useMemo, useState } from 'react';\nimport warning from '../../_util/warning';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Radio from '../../radio';\n// TODO: warning if use ajax!!!\nexport var SELECTION_COLUMN = {};\nexport var SELECTION_ALL = 'SELECT_ALL';\nexport var SELECTION_INVERT = 'SELECT_INVERT';\nexport var SELECTION_NONE = 'SELECT_NONE';\nvar EMPTY_LIST = [];\nvar flattenData = function flattenData(childrenColumnName, data) {\n  var list = [];\n  (data || []).forEach(function (record) {\n    list.push(record);\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));\n    }\n  });\n  return list;\n};\nvar useSelection = function useSelection(config, rowSelection) {\n  var _ref5 = rowSelection || {},\n    preserveSelectedRowKeys = _ref5.preserveSelectedRowKeys,\n    selectedRowKeys = _ref5.selectedRowKeys,\n    defaultSelectedRowKeys = _ref5.defaultSelectedRowKeys,\n    getCheckboxProps = _ref5.getCheckboxProps,\n    onSelectionChange = _ref5.onChange,\n    onSelect = _ref5.onSelect,\n    onSelectAll = _ref5.onSelectAll,\n    onSelectInvert = _ref5.onSelectInvert,\n    onSelectNone = _ref5.onSelectNone,\n    onSelectMultiple = _ref5.onSelectMultiple,\n    selectionColWidth = _ref5.columnWidth,\n    selectionType = _ref5.type,\n    selections = _ref5.selections,\n    fixed = _ref5.fixed,\n    customizeRenderCell = _ref5.renderCell,\n    hideSelectAll = _ref5.hideSelectAll,\n    _ref5$checkStrictly = _ref5.checkStrictly,\n    checkStrictly = _ref5$checkStrictly === void 0 ? true : _ref5$checkStrictly;\n  var prefixCls = config.prefixCls,\n    data = config.data,\n    pageData = config.pageData,\n    getRecordByKey = config.getRecordByKey,\n    getRowKey = config.getRowKey,\n    expandType = config.expandType,\n    childrenColumnName = config.childrenColumnName,\n    tableLocale = config.locale,\n    getPopupContainer = config.getPopupContainer;\n  // ========================= Keys =========================\n  var _useMergedState = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\n      value: selectedRowKeys\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    mergedSelectedKeys = _useMergedState2[0],\n    setMergedSelectedKeys = _useMergedState2[1];\n  // ======================== Caches ========================\n  var preserveRecordsRef = React.useRef(new Map());\n  var updatePreserveRecordsCache = useCallback(function (keys) {\n    if (preserveSelectedRowKeys) {\n      var newCache = new Map();\n      // Keep key if mark as preserveSelectedRowKeys\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n        newCache.set(key, record);\n      });\n      // Refresh to new cache\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]);\n  // Update cache with selectedKeys\n  React.useEffect(function () {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n  var _useMemo = useMemo(function () {\n      return checkStrictly ? {\n        keyEntities: null\n      } : convertDataToEntities(data, {\n        externalGetKey: getRowKey,\n        childrenPropName: childrenColumnName\n      });\n    }, [data, getRowKey, checkStrictly, childrenColumnName]),\n    keyEntities = _useMemo.keyEntities;\n  // Get flatten data\n  var flattedData = useMemo(function () {\n    return flattenData(childrenColumnName, pageData);\n  }, [childrenColumnName, pageData]);\n  // Get all checkbox props\n  var checkboxPropsMap = useMemo(function () {\n    var map = new Map();\n    flattedData.forEach(function (record, index) {\n      var key = getRowKey(record, index);\n      var checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  var isCheckboxDisabled = useCallback(function (r) {\n    var _a;\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n  var _useMemo2 = useMemo(function () {\n      if (checkStrictly) {\n        return [mergedSelectedKeys || [], []];\n      }\n      var _conductCheck = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled),\n        checkedKeys = _conductCheck.checkedKeys,\n        halfCheckedKeys = _conductCheck.halfCheckedKeys;\n      return [checkedKeys || [], halfCheckedKeys];\n    }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]),\n    _useMemo3 = _slicedToArray(_useMemo2, 2),\n    derivedSelectedKeys = _useMemo3[0],\n    derivedHalfSelectedKeys = _useMemo3[1];\n  var derivedSelectedKeySet = useMemo(function () {\n    var keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  var derivedHalfSelectedKeySet = useMemo(function () {\n    return selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys);\n  }, [derivedHalfSelectedKeys, selectionType]);\n  // Save last selected key to enable range selection\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    lastSelectedKey = _useState2[0],\n    setLastSelectedKey = _useState2[1];\n  // Reset if rowSelection reset\n  React.useEffect(function () {\n    if (!rowSelection) {\n      setMergedSelectedKeys(EMPTY_LIST);\n    }\n  }, [!!rowSelection]);\n  var setSelectedKeys = useCallback(function (keys, method) {\n    var availableKeys;\n    var records;\n    updatePreserveRecordsCache(keys);\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(function (key) {\n        return preserveRecordsRef.current.get(key);\n      });\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\n      type: method\n    });\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]);\n  // ====================== Selections ======================\n  // Trigger single `onSelect` event\n  var triggerSingleSelection = useCallback(function (key, selected, keys, event) {\n    if (onSelect) {\n      var rows = keys.map(function (k) {\n        return getRecordByKey(k);\n      });\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys, 'single');\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  var mergedSelections = useMemo(function () {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    var selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(function (selection) {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect: function onSelect() {\n            setSelectedKeys(data.map(function (record, index) {\n              return getRowKey(record, index);\n            }).filter(function (key) {\n              var checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }), 'all');\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect: function onSelect() {\n            var keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach(function (record, index) {\n              var key = getRowKey(record, index);\n              var checkProps = checkboxPropsMap.get(key);\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            var keys = Array.from(keySet);\n            if (onSelectInvert) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.') : void 0;\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys, 'invert');\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect: function onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(function (key) {\n              var checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }), 'none');\n          }\n        };\n      }\n      return selection;\n    }).map(function (selection) {\n      return Object.assign(Object.assign({}, selection), {\n        onSelect: function onSelect() {\n          var _a2;\n          var _a;\n          for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n            rest[_key] = arguments[_key];\n          }\n          (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\n          setLastSelectedKey(null);\n        }\n      });\n    });\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]);\n  // ======================= Columns ========================\n  var transformColumns = useCallback(function (columns) {\n    var _a;\n    // >>>>>>>>>>> Skip if not exists `rowSelection`\n    if (!rowSelection) {\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'Table', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\n      return columns.filter(function (col) {\n        return col !== SELECTION_COLUMN;\n      });\n    }\n    // >>>>>>>>>>> Support selection\n    var cloneColumns = _toConsumableArray(columns);\n    var keySet = new Set(derivedSelectedKeySet);\n    // Record key only need check with enabled\n    var recordKeys = flattedData.map(getRowKey).filter(function (key) {\n      return !checkboxPropsMap.get(key).disabled;\n    });\n    var checkedCurrentAll = recordKeys.every(function (key) {\n      return keySet.has(key);\n    });\n    var checkedCurrentSome = recordKeys.some(function (key) {\n      return keySet.has(key);\n    });\n    var onSelectAllChange = function onSelectAllChange() {\n      var changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(function (key) {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(function (key) {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      var keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(function (k) {\n        return getRecordByKey(k);\n      }), changeKeys.map(function (k) {\n        return getRecordByKey(k);\n      }));\n      setSelectedKeys(keys, 'all');\n      setLastSelectedKey(null);\n    };\n    // ===================== Render =====================\n    // Title Cell\n    var title;\n    if (selectionType !== 'radio') {\n      var customizeSelections;\n      if (mergedSelections) {\n        var menu = {\n          getPopupContainer: getPopupContainer,\n          items: mergedSelections.map(function (selection, index) {\n            var key = selection.key,\n              text = selection.text,\n              onSelectionClick = selection.onSelect;\n            return {\n              key: key !== null && key !== void 0 ? key : index,\n              onClick: function onClick() {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              },\n              label: text\n            };\n          })\n        };\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-selection-extra\")\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          menu: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n      var allDisabledData = flattedData.map(function (record, index) {\n        var key = getRowKey(record, index);\n        var checkboxProps = checkboxPropsMap.get(key) || {};\n        return Object.assign({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(function (_ref) {\n        var disabled = _ref.disabled;\n        return disabled;\n      });\n      var allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      var allDisabledAndChecked = allDisabled && allDisabledData.every(function (_ref2) {\n        var checked = _ref2.checked;\n        return checked;\n      });\n      var allDisabledSomeChecked = allDisabled && allDisabledData.some(function (_ref3) {\n        var checked = _ref3.checked;\n        return checked;\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-selection\")\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        skipGroup: true\n      }), customizeSelections);\n    }\n    // Body Cell\n    var renderCell;\n    if (selectionType === 'radio') {\n      renderCell = function renderCell(_, record, index) {\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, Object.assign({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(event) {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked: checked\n        };\n      };\n    } else {\n      renderCell = function renderCell(_, record, index) {\n        var _a;\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        var indeterminate = derivedHalfSelectedKeySet.has(key);\n        var checkboxProps = checkboxPropsMap.get(key);\n        var mergedIndeterminate;\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        }\n        // Record checked\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(_ref4) {\n              var nativeEvent = _ref4.nativeEvent;\n              var shiftKey = nativeEvent.shiftKey;\n              var startIndex = -1;\n              var endIndex = -1;\n              // Get range of this\n              if (shiftKey && checkStrictly) {\n                var pointKeys = new Set([lastSelectedKey, key]);\n                recordKeys.some(function (recordKey, recordIndex) {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n                  return false;\n                });\n              }\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                var rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                var changedKeys = [];\n                if (checked) {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.delete(recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n                var keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }), changedKeys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }));\n                setSelectedKeys(keys, 'multiple');\n              } else {\n                // Single record selected\n                var originCheckedKeys = derivedSelectedKeys;\n                if (checkStrictly) {\n                  var checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  var result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  var _checkedKeys = result.checkedKeys,\n                    halfCheckedKeys = result.halfCheckedKeys;\n                  var nextCheckedKeys = _checkedKeys;\n                  // If remove, we do it again to correction\n                  if (checked) {\n                    var tempKeySet = new Set(_checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys: halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              if (checked) {\n                setLastSelectedKey(null);\n              } else {\n                setLastSelectedKey(key);\n              }\n            }\n          })),\n          checked: checked\n        };\n      };\n    }\n    var renderSelectionCell = function renderSelectionCell(_, record, index) {\n      var _renderCell = renderCell(_, record, index),\n        node = _renderCell.node,\n        checked = _renderCell.checked;\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    };\n    // Insert selection column if not exist\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(function (col) {\n        var _a;\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        var _cloneColumns = cloneColumns,\n          _cloneColumns2 = _toArray(_cloneColumns),\n          expandColumn = _cloneColumns2[0],\n          restColumns = _cloneColumns2.slice(1);\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));\n      }\n    }\n    // Deduplicate selection column\n    var selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(function (col) {\n      return col === SELECTION_COLUMN;\n    }).length <= 1, 'Table', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\n    cloneColumns = cloneColumns.filter(function (column, index) {\n      return column !== SELECTION_COLUMN || index === selectionColumnIndex;\n    });\n    // Fixed column logic\n    var prevCol = cloneColumns[selectionColumnIndex - 1];\n    var nextCol = cloneColumns[selectionColumnIndex + 1];\n    var mergedFixed = fixed;\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n    var columnCls = classNames(\"\".concat(prefixCls, \"-selection-col\"), _defineProperty({}, \"\".concat(prefixCls, \"-selection-col-with-dropdown\"), selections && selectionType === 'checkbox'));\n    // Replace with real selection column\n    var selectionColumn = _defineProperty({\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: \"\".concat(prefixCls, \"-selection-column\"),\n      title: rowSelection.columnTitle || title,\n      render: renderSelectionCell\n    }, INTERNAL_COL_DEFINE, {\n      className: columnCls\n    });\n    return cloneColumns.map(function (col) {\n      return col === SELECTION_COLUMN ? selectionColumn : col;\n    });\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n};\nexport default useSelection;","map":{"version":3,"names":["_toConsumableArray","DownOutlined","classNames","INTERNAL_COL_DEFINE","arrAdd","arrDel","conductCheck","convertDataToEntities","useMergedState","React","useCallback","useMemo","useState","warning","Checkbox","Dropdown","Radio","SELECTION_COLUMN","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","EMPTY_LIST","flattenData","childrenColumnName","data","list","forEach","record","push","concat","useSelection","config","rowSelection","_ref5","preserveSelectedRowKeys","selectedRowKeys","defaultSelectedRowKeys","getCheckboxProps","onSelectionChange","onChange","onSelect","onSelectAll","onSelectInvert","onSelectNone","onSelectMultiple","selectionColWidth","columnWidth","selectionType","type","selections","fixed","customizeRenderCell","renderCell","hideSelectAll","_ref5$checkStrictly","checkStrictly","prefixCls","pageData","getRecordByKey","getRowKey","expandType","tableLocale","locale","getPopupContainer","_useMergedState","value","_useMergedState2","_slicedToArray","mergedSelectedKeys","setMergedSelectedKeys","preserveRecordsRef","useRef","Map","updatePreserveRecordsCache","keys","newCache","key","current","has","get","set","useEffect","_useMemo","keyEntities","externalGetKey","childrenPropName","flattedData","checkboxPropsMap","map","index","checkboxProps","process","env","NODE_ENV","isCheckboxDisabled","r","_a","disabled","_useMemo2","_conductCheck","checkedKeys","halfCheckedKeys","_useMemo3","derivedSelectedKeys","derivedHalfSelectedKeys","derivedSelectedKeySet","slice","Set","derivedHalfSelectedKeySet","_useState","_useState2","lastSelectedKey","setLastSelectedKey","setSelectedKeys","method","availableKeys","records","undefined","triggerSingleSelection","selected","event","rows","k","mergedSelections","selectionList","selection","text","selectionAll","filter","checkProps","selectInvert","keySet","delete","add","Array","from","selectNone","Object","assign","_a2","_len","arguments","length","rest","_key","call","apply","transformColumns","columns","includes","col","cloneColumns","recordKeys","checkedCurrentAll","every","checkedCurrentSome","some","onSelectAllChange","changeKeys","title","customizeSelections","menu","items","onSelectionClick","onClick","label","createElement","className","allDisabledData","checked","_ref","allDisabled","allDisabledAndChecked","_ref2","allDisabledSomeChecked","_ref3","indeterminate","skipGroup","_","node","e","stopPropagation","nativeEvent","mergedIndeterminate","_ref4","shiftKey","startIndex","endIndex","pointKeys","recordKey","recordIndex","rangeKeys","changedKeys","originCheckedKeys","result","nextCheckedKeys","tempKeySet","renderSelectionCell","_renderCell","findIndex","columnType","_cloneColumns","_cloneColumns2","_toArray","expandColumn","restColumns","selectionColumnIndex","indexOf","column","prevCol","nextCol","mergedFixed","columnCls","_defineProperty","selectionColumn","width","columnTitle","render"],"sources":["C:/Users/parkj/Desktop/OSS/Git_filemanager/frontend/node_modules/antd/es/table/hooks/useSelection.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\r\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\r\nimport classNames from 'classnames';\r\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\r\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\r\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\r\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\r\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\r\nimport * as React from 'react';\r\nimport { useCallback, useMemo, useState } from 'react';\r\nimport warning from '../../_util/warning';\r\nimport Checkbox from '../../checkbox';\r\nimport Dropdown from '../../dropdown';\r\nimport Radio from '../../radio';\r\n// TODO: warning if use ajax!!!\r\nexport const SELECTION_COLUMN = {};\r\nexport const SELECTION_ALL = 'SELECT_ALL';\r\nexport const SELECTION_INVERT = 'SELECT_INVERT';\r\nexport const SELECTION_NONE = 'SELECT_NONE';\r\nconst EMPTY_LIST = [];\r\nconst flattenData = (childrenColumnName, data) => {\r\n  let list = [];\r\n  (data || []).forEach(record => {\r\n    list.push(record);\r\n    if (record && typeof record === 'object' && childrenColumnName in record) {\r\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));\r\n    }\r\n  });\r\n  return list;\r\n};\r\nconst useSelection = (config, rowSelection) => {\r\n  const {\r\n    preserveSelectedRowKeys,\r\n    selectedRowKeys,\r\n    defaultSelectedRowKeys,\r\n    getCheckboxProps,\r\n    onChange: onSelectionChange,\r\n    onSelect,\r\n    onSelectAll,\r\n    onSelectInvert,\r\n    onSelectNone,\r\n    onSelectMultiple,\r\n    columnWidth: selectionColWidth,\r\n    type: selectionType,\r\n    selections,\r\n    fixed,\r\n    renderCell: customizeRenderCell,\r\n    hideSelectAll,\r\n    checkStrictly = true\r\n  } = rowSelection || {};\r\n  const {\r\n    prefixCls,\r\n    data,\r\n    pageData,\r\n    getRecordByKey,\r\n    getRowKey,\r\n    expandType,\r\n    childrenColumnName,\r\n    locale: tableLocale,\r\n    getPopupContainer\r\n  } = config;\r\n  // ========================= Keys =========================\r\n  const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\r\n    value: selectedRowKeys\r\n  });\r\n  // ======================== Caches ========================\r\n  const preserveRecordsRef = React.useRef(new Map());\r\n  const updatePreserveRecordsCache = useCallback(keys => {\r\n    if (preserveSelectedRowKeys) {\r\n      const newCache = new Map();\r\n      // Keep key if mark as preserveSelectedRowKeys\r\n      keys.forEach(key => {\r\n        let record = getRecordByKey(key);\r\n        if (!record && preserveRecordsRef.current.has(key)) {\r\n          record = preserveRecordsRef.current.get(key);\r\n        }\r\n        newCache.set(key, record);\r\n      });\r\n      // Refresh to new cache\r\n      preserveRecordsRef.current = newCache;\r\n    }\r\n  }, [getRecordByKey, preserveSelectedRowKeys]);\r\n  // Update cache with selectedKeys\r\n  React.useEffect(() => {\r\n    updatePreserveRecordsCache(mergedSelectedKeys);\r\n  }, [mergedSelectedKeys]);\r\n  const {\r\n    keyEntities\r\n  } = useMemo(() => checkStrictly ? {\r\n    keyEntities: null\r\n  } : convertDataToEntities(data, {\r\n    externalGetKey: getRowKey,\r\n    childrenPropName: childrenColumnName\r\n  }), [data, getRowKey, checkStrictly, childrenColumnName]);\r\n  // Get flatten data\r\n  const flattedData = useMemo(() => flattenData(childrenColumnName, pageData), [childrenColumnName, pageData]);\r\n  // Get all checkbox props\r\n  const checkboxPropsMap = useMemo(() => {\r\n    const map = new Map();\r\n    flattedData.forEach((record, index) => {\r\n      const key = getRowKey(record, index);\r\n      const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\r\n      map.set(key, checkboxProps);\r\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\r\n    });\r\n    return map;\r\n  }, [flattedData, getRowKey, getCheckboxProps]);\r\n  const isCheckboxDisabled = useCallback(r => {\r\n    var _a;\r\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\r\n  }, [checkboxPropsMap, getRowKey]);\r\n  const [derivedSelectedKeys, derivedHalfSelectedKeys] = useMemo(() => {\r\n    if (checkStrictly) {\r\n      return [mergedSelectedKeys || [], []];\r\n    }\r\n    const {\r\n      checkedKeys,\r\n      halfCheckedKeys\r\n    } = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled);\r\n    return [checkedKeys || [], halfCheckedKeys];\r\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]);\r\n  const derivedSelectedKeySet = useMemo(() => {\r\n    const keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\r\n    return new Set(keys);\r\n  }, [derivedSelectedKeys, selectionType]);\r\n  const derivedHalfSelectedKeySet = useMemo(() => selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys), [derivedHalfSelectedKeys, selectionType]);\r\n  // Save last selected key to enable range selection\r\n  const [lastSelectedKey, setLastSelectedKey] = useState(null);\r\n  // Reset if rowSelection reset\r\n  React.useEffect(() => {\r\n    if (!rowSelection) {\r\n      setMergedSelectedKeys(EMPTY_LIST);\r\n    }\r\n  }, [!!rowSelection]);\r\n  const setSelectedKeys = useCallback((keys, method) => {\r\n    let availableKeys;\r\n    let records;\r\n    updatePreserveRecordsCache(keys);\r\n    if (preserveSelectedRowKeys) {\r\n      availableKeys = keys;\r\n      records = keys.map(key => preserveRecordsRef.current.get(key));\r\n    } else {\r\n      // Filter key which not exist in the `dataSource`\r\n      availableKeys = [];\r\n      records = [];\r\n      keys.forEach(key => {\r\n        const record = getRecordByKey(key);\r\n        if (record !== undefined) {\r\n          availableKeys.push(key);\r\n          records.push(record);\r\n        }\r\n      });\r\n    }\r\n    setMergedSelectedKeys(availableKeys);\r\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\r\n      type: method\r\n    });\r\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]);\r\n  // ====================== Selections ======================\r\n  // Trigger single `onSelect` event\r\n  const triggerSingleSelection = useCallback((key, selected, keys, event) => {\r\n    if (onSelect) {\r\n      const rows = keys.map(k => getRecordByKey(k));\r\n      onSelect(getRecordByKey(key), selected, rows, event);\r\n    }\r\n    setSelectedKeys(keys, 'single');\r\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\r\n  const mergedSelections = useMemo(() => {\r\n    if (!selections || hideSelectAll) {\r\n      return null;\r\n    }\r\n    const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\r\n    return selectionList.map(selection => {\r\n      if (selection === SELECTION_ALL) {\r\n        return {\r\n          key: 'all',\r\n          text: tableLocale.selectionAll,\r\n          onSelect() {\r\n            setSelectedKeys(data.map((record, index) => getRowKey(record, index)).filter(key => {\r\n              const checkProps = checkboxPropsMap.get(key);\r\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\r\n            }), 'all');\r\n          }\r\n        };\r\n      }\r\n      if (selection === SELECTION_INVERT) {\r\n        return {\r\n          key: 'invert',\r\n          text: tableLocale.selectInvert,\r\n          onSelect() {\r\n            const keySet = new Set(derivedSelectedKeySet);\r\n            pageData.forEach((record, index) => {\r\n              const key = getRowKey(record, index);\r\n              const checkProps = checkboxPropsMap.get(key);\r\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\r\n                if (keySet.has(key)) {\r\n                  keySet.delete(key);\r\n                } else {\r\n                  keySet.add(key);\r\n                }\r\n              }\r\n            });\r\n            const keys = Array.from(keySet);\r\n            if (onSelectInvert) {\r\n              process.env.NODE_ENV !== \"production\" ? warning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.') : void 0;\r\n              onSelectInvert(keys);\r\n            }\r\n            setSelectedKeys(keys, 'invert');\r\n          }\r\n        };\r\n      }\r\n      if (selection === SELECTION_NONE) {\r\n        return {\r\n          key: 'none',\r\n          text: tableLocale.selectNone,\r\n          onSelect() {\r\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\r\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(key => {\r\n              const checkProps = checkboxPropsMap.get(key);\r\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\r\n            }), 'none');\r\n          }\r\n        };\r\n      }\r\n      return selection;\r\n    }).map(selection => Object.assign(Object.assign({}, selection), {\r\n      onSelect: function () {\r\n        var _a2;\r\n        var _a;\r\n        for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\r\n          rest[_key] = arguments[_key];\r\n        }\r\n        (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\r\n        setLastSelectedKey(null);\r\n      }\r\n    }));\r\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]);\r\n  // ======================= Columns ========================\r\n  const transformColumns = useCallback(columns => {\r\n    var _a;\r\n    // >>>>>>>>>>> Skip if not exists `rowSelection`\r\n    if (!rowSelection) {\r\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'Table', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\r\n      return columns.filter(col => col !== SELECTION_COLUMN);\r\n    }\r\n    // >>>>>>>>>>> Support selection\r\n    let cloneColumns = _toConsumableArray(columns);\r\n    const keySet = new Set(derivedSelectedKeySet);\r\n    // Record key only need check with enabled\r\n    const recordKeys = flattedData.map(getRowKey).filter(key => !checkboxPropsMap.get(key).disabled);\r\n    const checkedCurrentAll = recordKeys.every(key => keySet.has(key));\r\n    const checkedCurrentSome = recordKeys.some(key => keySet.has(key));\r\n    const onSelectAllChange = () => {\r\n      const changeKeys = [];\r\n      if (checkedCurrentAll) {\r\n        recordKeys.forEach(key => {\r\n          keySet.delete(key);\r\n          changeKeys.push(key);\r\n        });\r\n      } else {\r\n        recordKeys.forEach(key => {\r\n          if (!keySet.has(key)) {\r\n            keySet.add(key);\r\n            changeKeys.push(key);\r\n          }\r\n        });\r\n      }\r\n      const keys = Array.from(keySet);\r\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));\r\n      setSelectedKeys(keys, 'all');\r\n      setLastSelectedKey(null);\r\n    };\r\n    // ===================== Render =====================\r\n    // Title Cell\r\n    let title;\r\n    if (selectionType !== 'radio') {\r\n      let customizeSelections;\r\n      if (mergedSelections) {\r\n        const menu = {\r\n          getPopupContainer,\r\n          items: mergedSelections.map((selection, index) => {\r\n            const {\r\n              key,\r\n              text,\r\n              onSelect: onSelectionClick\r\n            } = selection;\r\n            return {\r\n              key: key !== null && key !== void 0 ? key : index,\r\n              onClick: () => {\r\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\r\n              },\r\n              label: text\r\n            };\r\n          })\r\n        };\r\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\r\n          className: `${prefixCls}-selection-extra`\r\n        }, /*#__PURE__*/React.createElement(Dropdown, {\r\n          menu: menu,\r\n          getPopupContainer: getPopupContainer\r\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\r\n      }\r\n      const allDisabledData = flattedData.map((record, index) => {\r\n        const key = getRowKey(record, index);\r\n        const checkboxProps = checkboxPropsMap.get(key) || {};\r\n        return Object.assign({\r\n          checked: keySet.has(key)\r\n        }, checkboxProps);\r\n      }).filter(_ref => {\r\n        let {\r\n          disabled\r\n        } = _ref;\r\n        return disabled;\r\n      });\r\n      const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\r\n      const allDisabledAndChecked = allDisabled && allDisabledData.every(_ref2 => {\r\n        let {\r\n          checked\r\n        } = _ref2;\r\n        return checked;\r\n      });\r\n      const allDisabledSomeChecked = allDisabled && allDisabledData.some(_ref3 => {\r\n        let {\r\n          checked\r\n        } = _ref3;\r\n        return checked;\r\n      });\r\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\r\n        className: `${prefixCls}-selection`\r\n      }, /*#__PURE__*/React.createElement(Checkbox, {\r\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\r\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\r\n        onChange: onSelectAllChange,\r\n        disabled: flattedData.length === 0 || allDisabled,\r\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\r\n        skipGroup: true\r\n      }), customizeSelections);\r\n    }\r\n    // Body Cell\r\n    let renderCell;\r\n    if (selectionType === 'radio') {\r\n      renderCell = (_, record, index) => {\r\n        const key = getRowKey(record, index);\r\n        const checked = keySet.has(key);\r\n        return {\r\n          node: /*#__PURE__*/React.createElement(Radio, Object.assign({}, checkboxPropsMap.get(key), {\r\n            checked: checked,\r\n            onClick: e => e.stopPropagation(),\r\n            onChange: event => {\r\n              if (!keySet.has(key)) {\r\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\r\n              }\r\n            }\r\n          })),\r\n          checked\r\n        };\r\n      };\r\n    } else {\r\n      renderCell = (_, record, index) => {\r\n        var _a;\r\n        const key = getRowKey(record, index);\r\n        const checked = keySet.has(key);\r\n        const indeterminate = derivedHalfSelectedKeySet.has(key);\r\n        const checkboxProps = checkboxPropsMap.get(key);\r\n        let mergedIndeterminate;\r\n        if (expandType === 'nest') {\r\n          mergedIndeterminate = indeterminate;\r\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\r\n        } else {\r\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\r\n        }\r\n        // Record checked\r\n        return {\r\n          node: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\r\n            indeterminate: mergedIndeterminate,\r\n            checked: checked,\r\n            skipGroup: true,\r\n            onClick: e => e.stopPropagation(),\r\n            onChange: _ref4 => {\r\n              let {\r\n                nativeEvent\r\n              } = _ref4;\r\n              const {\r\n                shiftKey\r\n              } = nativeEvent;\r\n              let startIndex = -1;\r\n              let endIndex = -1;\r\n              // Get range of this\r\n              if (shiftKey && checkStrictly) {\r\n                const pointKeys = new Set([lastSelectedKey, key]);\r\n                recordKeys.some((recordKey, recordIndex) => {\r\n                  if (pointKeys.has(recordKey)) {\r\n                    if (startIndex === -1) {\r\n                      startIndex = recordIndex;\r\n                    } else {\r\n                      endIndex = recordIndex;\r\n                      return true;\r\n                    }\r\n                  }\r\n                  return false;\r\n                });\r\n              }\r\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\r\n                // Batch update selections\r\n                const rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\r\n                const changedKeys = [];\r\n                if (checked) {\r\n                  rangeKeys.forEach(recordKey => {\r\n                    if (keySet.has(recordKey)) {\r\n                      changedKeys.push(recordKey);\r\n                      keySet.delete(recordKey);\r\n                    }\r\n                  });\r\n                } else {\r\n                  rangeKeys.forEach(recordKey => {\r\n                    if (!keySet.has(recordKey)) {\r\n                      changedKeys.push(recordKey);\r\n                      keySet.add(recordKey);\r\n                    }\r\n                  });\r\n                }\r\n                const keys = Array.from(keySet);\r\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));\r\n                setSelectedKeys(keys, 'multiple');\r\n              } else {\r\n                // Single record selected\r\n                const originCheckedKeys = derivedSelectedKeys;\r\n                if (checkStrictly) {\r\n                  const checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\r\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\r\n                } else {\r\n                  // Always fill first\r\n                  const result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\r\n                  const {\r\n                    checkedKeys,\r\n                    halfCheckedKeys\r\n                  } = result;\r\n                  let nextCheckedKeys = checkedKeys;\r\n                  // If remove, we do it again to correction\r\n                  if (checked) {\r\n                    const tempKeySet = new Set(checkedKeys);\r\n                    tempKeySet.delete(key);\r\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\r\n                      checked: false,\r\n                      halfCheckedKeys\r\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\r\n                  }\r\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\r\n                }\r\n              }\r\n              if (checked) {\r\n                setLastSelectedKey(null);\r\n              } else {\r\n                setLastSelectedKey(key);\r\n              }\r\n            }\r\n          })),\r\n          checked\r\n        };\r\n      };\r\n    }\r\n    const renderSelectionCell = (_, record, index) => {\r\n      const {\r\n        node,\r\n        checked\r\n      } = renderCell(_, record, index);\r\n      if (customizeRenderCell) {\r\n        return customizeRenderCell(checked, record, index, node);\r\n      }\r\n      return node;\r\n    };\r\n    // Insert selection column if not exist\r\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\r\n      // Always after expand icon\r\n      if (cloneColumns.findIndex(col => {\r\n        var _a;\r\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\r\n      }) === 0) {\r\n        const [expandColumn, ...restColumns] = cloneColumns;\r\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));\r\n      } else {\r\n        // Normal insert at first column\r\n        cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));\r\n      }\r\n    }\r\n    // Deduplicate selection column\r\n    const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\r\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(col => col === SELECTION_COLUMN).length <= 1, 'Table', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\r\n    cloneColumns = cloneColumns.filter((column, index) => column !== SELECTION_COLUMN || index === selectionColumnIndex);\r\n    // Fixed column logic\r\n    const prevCol = cloneColumns[selectionColumnIndex - 1];\r\n    const nextCol = cloneColumns[selectionColumnIndex + 1];\r\n    let mergedFixed = fixed;\r\n    if (mergedFixed === undefined) {\r\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\r\n        mergedFixed = nextCol.fixed;\r\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\r\n        mergedFixed = prevCol.fixed;\r\n      }\r\n    }\r\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\r\n      prevCol.fixed = mergedFixed;\r\n    }\r\n    const columnCls = classNames(`${prefixCls}-selection-col`, {\r\n      [`${prefixCls}-selection-col-with-dropdown`]: selections && selectionType === 'checkbox'\r\n    });\r\n    // Replace with real selection column\r\n    const selectionColumn = {\r\n      fixed: mergedFixed,\r\n      width: selectionColWidth,\r\n      className: `${prefixCls}-selection-column`,\r\n      title: rowSelection.columnTitle || title,\r\n      render: renderSelectionCell,\r\n      [INTERNAL_COL_DEFINE]: {\r\n        className: columnCls\r\n      }\r\n    };\r\n    return cloneColumns.map(col => col === SELECTION_COLUMN ? selectionColumn : col);\r\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\r\n  return [transformColumns, derivedSelectedKeySet];\r\n};\r\nexport default useSelection;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}