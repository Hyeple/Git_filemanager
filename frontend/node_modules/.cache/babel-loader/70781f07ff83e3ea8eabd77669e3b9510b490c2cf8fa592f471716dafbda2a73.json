{"ast":null,"code":"/*!\r\n * merge-descriptors\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module exports.\r\n * @public\r\n */\nmodule.exports = merge;\n\n/**\r\n * Module variables.\r\n * @private\r\n */\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\r\n * Merge the property descriptors of `src` into `dest`\r\n *\r\n * @param {object} dest Object to add descriptors to\r\n * @param {object} src Object to clone descriptors from\r\n * @param {boolean} [redefine=true] Redefine `dest` properties with `src` properties\r\n * @returns {object} Reference to dest\r\n * @public\r\n */\n\nfunction merge(dest, src, redefine) {\n  if (!dest) {\n    throw new TypeError('argument dest is required');\n  }\n  if (!src) {\n    throw new TypeError('argument src is required');\n  }\n  if (redefine === undefined) {\n    // Default to true\n    redefine = true;\n  }\n  Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName(name) {\n    if (!redefine && hasOwnProperty.call(dest, name)) {\n      // Skip desriptor\n      return;\n    }\n\n    // Copy descriptor\n    var descriptor = Object.getOwnPropertyDescriptor(src, name);\n    Object.defineProperty(dest, name, descriptor);\n  });\n  return dest;\n}","map":{"version":3,"names":["module","exports","merge","hasOwnProperty","Object","prototype","dest","src","redefine","TypeError","undefined","getOwnPropertyNames","forEach","forEachOwnPropertyName","name","call","descriptor","getOwnPropertyDescriptor","defineProperty"],"sources":["C:/Users/parkj/Desktop/OSS/Git_filemanager/frontend/node_modules/merge-descriptors/index.js"],"sourcesContent":["/*!\r\n * merge-descriptors\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = merge\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty\r\n\r\n/**\r\n * Merge the property descriptors of `src` into `dest`\r\n *\r\n * @param {object} dest Object to add descriptors to\r\n * @param {object} src Object to clone descriptors from\r\n * @param {boolean} [redefine=true] Redefine `dest` properties with `src` properties\r\n * @returns {object} Reference to dest\r\n * @public\r\n */\r\n\r\nfunction merge(dest, src, redefine) {\r\n  if (!dest) {\r\n    throw new TypeError('argument dest is required')\r\n  }\r\n\r\n  if (!src) {\r\n    throw new TypeError('argument src is required')\r\n  }\r\n\r\n  if (redefine === undefined) {\r\n    // Default to true\r\n    redefine = true\r\n  }\r\n\r\n  Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName(name) {\r\n    if (!redefine && hasOwnProperty.call(dest, name)) {\r\n      // Skip desriptor\r\n      return\r\n    }\r\n\r\n    // Copy descriptor\r\n    var descriptor = Object.getOwnPropertyDescriptor(src, name)\r\n    Object.defineProperty(dest, name, descriptor)\r\n  })\r\n\r\n  return dest\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAGC,KAAK;;AAEtB;AACA;AACA;AACA;;AAEA,IAAIC,cAAc,GAAGC,MAAM,CAACC,SAAS,CAACF,cAAc;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASD,KAAKA,CAACI,IAAI,EAAEC,GAAG,EAAEC,QAAQ,EAAE;EAClC,IAAI,CAACF,IAAI,EAAE;IACT,MAAM,IAAIG,SAAS,CAAC,2BAA2B,CAAC;EAClD;EAEA,IAAI,CAACF,GAAG,EAAE;IACR,MAAM,IAAIE,SAAS,CAAC,0BAA0B,CAAC;EACjD;EAEA,IAAID,QAAQ,KAAKE,SAAS,EAAE;IAC1B;IACAF,QAAQ,GAAG,IAAI;EACjB;EAEAJ,MAAM,CAACO,mBAAmB,CAACJ,GAAG,CAAC,CAACK,OAAO,CAAC,SAASC,sBAAsBA,CAACC,IAAI,EAAE;IAC5E,IAAI,CAACN,QAAQ,IAAIL,cAAc,CAACY,IAAI,CAACT,IAAI,EAAEQ,IAAI,CAAC,EAAE;MAChD;MACA;IACF;;IAEA;IACA,IAAIE,UAAU,GAAGZ,MAAM,CAACa,wBAAwB,CAACV,GAAG,EAAEO,IAAI,CAAC;IAC3DV,MAAM,CAACc,cAAc,CAACZ,IAAI,EAAEQ,IAAI,EAAEE,UAAU,CAAC;EAC/C,CAAC,CAAC;EAEF,OAAOV,IAAI;AACb"},"metadata":{},"sourceType":"script","externalDependencies":[]}