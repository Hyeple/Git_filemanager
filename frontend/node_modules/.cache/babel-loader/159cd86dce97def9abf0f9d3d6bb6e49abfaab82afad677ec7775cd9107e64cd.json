{"ast":null,"code":"import { TinyColor } from '@ctrl/tinycolor';\nexport default function genColorMapToken(seed, _ref) {\n  var generateColorPalettes = _ref.generateColorPalettes,\n    generateNeutralColorPalettes = _ref.generateNeutralColorPalettes;\n  var colorSuccessBase = seed.colorSuccess,\n    colorWarningBase = seed.colorWarning,\n    colorErrorBase = seed.colorError,\n    colorInfoBase = seed.colorInfo,\n    colorPrimaryBase = seed.colorPrimary,\n    colorBgBase = seed.colorBgBase,\n    colorTextBase = seed.colorTextBase;\n  var primaryColors = generateColorPalettes(colorPrimaryBase);\n  var successColors = generateColorPalettes(colorSuccessBase);\n  var warningColors = generateColorPalettes(colorWarningBase);\n  var errorColors = generateColorPalettes(colorErrorBase);\n  var infoColors = generateColorPalettes(colorInfoBase);\n  var neutralColors = generateNeutralColorPalettes(colorBgBase, colorTextBase);\n  return Object.assign(Object.assign({}, neutralColors), {\n    colorPrimaryBg: primaryColors[1],\n    colorPrimaryBgHover: primaryColors[2],\n    colorPrimaryBorder: primaryColors[3],\n    colorPrimaryBorderHover: primaryColors[4],\n    colorPrimaryHover: primaryColors[5],\n    colorPrimary: primaryColors[6],\n    colorPrimaryActive: primaryColors[7],\n    colorPrimaryTextHover: primaryColors[8],\n    colorPrimaryText: primaryColors[9],\n    colorPrimaryTextActive: primaryColors[10],\n    colorSuccessBg: successColors[1],\n    colorSuccessBgHover: successColors[2],\n    colorSuccessBorder: successColors[3],\n    colorSuccessBorderHover: successColors[4],\n    colorSuccessHover: successColors[4],\n    colorSuccess: successColors[6],\n    colorSuccessActive: successColors[7],\n    colorSuccessTextHover: successColors[8],\n    colorSuccessText: successColors[9],\n    colorSuccessTextActive: successColors[10],\n    colorErrorBg: errorColors[1],\n    colorErrorBgHover: errorColors[2],\n    colorErrorBorder: errorColors[3],\n    colorErrorBorderHover: errorColors[4],\n    colorErrorHover: errorColors[5],\n    colorError: errorColors[6],\n    colorErrorActive: errorColors[7],\n    colorErrorTextHover: errorColors[8],\n    colorErrorText: errorColors[9],\n    colorErrorTextActive: errorColors[10],\n    colorWarningBg: warningColors[1],\n    colorWarningBgHover: warningColors[2],\n    colorWarningBorder: warningColors[3],\n    colorWarningBorderHover: warningColors[4],\n    colorWarningHover: warningColors[4],\n    colorWarning: warningColors[6],\n    colorWarningActive: warningColors[7],\n    colorWarningTextHover: warningColors[8],\n    colorWarningText: warningColors[9],\n    colorWarningTextActive: warningColors[10],\n    colorInfoBg: infoColors[1],\n    colorInfoBgHover: infoColors[2],\n    colorInfoBorder: infoColors[3],\n    colorInfoBorderHover: infoColors[4],\n    colorInfoHover: infoColors[4],\n    colorInfo: infoColors[6],\n    colorInfoActive: infoColors[7],\n    colorInfoTextHover: infoColors[8],\n    colorInfoText: infoColors[9],\n    colorInfoTextActive: infoColors[10],\n    colorBgMask: new TinyColor('#000').setAlpha(0.45).toRgbString(),\n    colorWhite: '#fff'\n  });\n}","map":{"version":3,"names":["TinyColor","genColorMapToken","seed","_ref","generateColorPalettes","generateNeutralColorPalettes","colorSuccessBase","colorSuccess","colorWarningBase","colorWarning","colorErrorBase","colorError","colorInfoBase","colorInfo","colorPrimaryBase","colorPrimary","colorBgBase","colorTextBase","primaryColors","successColors","warningColors","errorColors","infoColors","neutralColors","Object","assign","colorPrimaryBg","colorPrimaryBgHover","colorPrimaryBorder","colorPrimaryBorderHover","colorPrimaryHover","colorPrimaryActive","colorPrimaryTextHover","colorPrimaryText","colorPrimaryTextActive","colorSuccessBg","colorSuccessBgHover","colorSuccessBorder","colorSuccessBorderHover","colorSuccessHover","colorSuccessActive","colorSuccessTextHover","colorSuccessText","colorSuccessTextActive","colorErrorBg","colorErrorBgHover","colorErrorBorder","colorErrorBorderHover","colorErrorHover","colorErrorActive","colorErrorTextHover","colorErrorText","colorErrorTextActive","colorWarningBg","colorWarningBgHover","colorWarningBorder","colorWarningBorderHover","colorWarningHover","colorWarningActive","colorWarningTextHover","colorWarningText","colorWarningTextActive","colorInfoBg","colorInfoBgHover","colorInfoBorder","colorInfoBorderHover","colorInfoHover","colorInfoActive","colorInfoTextHover","colorInfoText","colorInfoTextActive","colorBgMask","setAlpha","toRgbString","colorWhite"],"sources":["C:/Users/parkj/Desktop/OSS/Git_filemanager/frontend/node_modules/antd/es/theme/themes/shared/genColorMapToken.js"],"sourcesContent":["import { TinyColor } from '@ctrl/tinycolor';\r\nexport default function genColorMapToken(seed, _ref) {\r\n  let {\r\n    generateColorPalettes,\r\n    generateNeutralColorPalettes\r\n  } = _ref;\r\n  const {\r\n    colorSuccess: colorSuccessBase,\r\n    colorWarning: colorWarningBase,\r\n    colorError: colorErrorBase,\r\n    colorInfo: colorInfoBase,\r\n    colorPrimary: colorPrimaryBase,\r\n    colorBgBase,\r\n    colorTextBase\r\n  } = seed;\r\n  const primaryColors = generateColorPalettes(colorPrimaryBase);\r\n  const successColors = generateColorPalettes(colorSuccessBase);\r\n  const warningColors = generateColorPalettes(colorWarningBase);\r\n  const errorColors = generateColorPalettes(colorErrorBase);\r\n  const infoColors = generateColorPalettes(colorInfoBase);\r\n  const neutralColors = generateNeutralColorPalettes(colorBgBase, colorTextBase);\r\n  return Object.assign(Object.assign({}, neutralColors), {\r\n    colorPrimaryBg: primaryColors[1],\r\n    colorPrimaryBgHover: primaryColors[2],\r\n    colorPrimaryBorder: primaryColors[3],\r\n    colorPrimaryBorderHover: primaryColors[4],\r\n    colorPrimaryHover: primaryColors[5],\r\n    colorPrimary: primaryColors[6],\r\n    colorPrimaryActive: primaryColors[7],\r\n    colorPrimaryTextHover: primaryColors[8],\r\n    colorPrimaryText: primaryColors[9],\r\n    colorPrimaryTextActive: primaryColors[10],\r\n    colorSuccessBg: successColors[1],\r\n    colorSuccessBgHover: successColors[2],\r\n    colorSuccessBorder: successColors[3],\r\n    colorSuccessBorderHover: successColors[4],\r\n    colorSuccessHover: successColors[4],\r\n    colorSuccess: successColors[6],\r\n    colorSuccessActive: successColors[7],\r\n    colorSuccessTextHover: successColors[8],\r\n    colorSuccessText: successColors[9],\r\n    colorSuccessTextActive: successColors[10],\r\n    colorErrorBg: errorColors[1],\r\n    colorErrorBgHover: errorColors[2],\r\n    colorErrorBorder: errorColors[3],\r\n    colorErrorBorderHover: errorColors[4],\r\n    colorErrorHover: errorColors[5],\r\n    colorError: errorColors[6],\r\n    colorErrorActive: errorColors[7],\r\n    colorErrorTextHover: errorColors[8],\r\n    colorErrorText: errorColors[9],\r\n    colorErrorTextActive: errorColors[10],\r\n    colorWarningBg: warningColors[1],\r\n    colorWarningBgHover: warningColors[2],\r\n    colorWarningBorder: warningColors[3],\r\n    colorWarningBorderHover: warningColors[4],\r\n    colorWarningHover: warningColors[4],\r\n    colorWarning: warningColors[6],\r\n    colorWarningActive: warningColors[7],\r\n    colorWarningTextHover: warningColors[8],\r\n    colorWarningText: warningColors[9],\r\n    colorWarningTextActive: warningColors[10],\r\n    colorInfoBg: infoColors[1],\r\n    colorInfoBgHover: infoColors[2],\r\n    colorInfoBorder: infoColors[3],\r\n    colorInfoBorderHover: infoColors[4],\r\n    colorInfoHover: infoColors[4],\r\n    colorInfo: infoColors[6],\r\n    colorInfoActive: infoColors[7],\r\n    colorInfoTextHover: infoColors[8],\r\n    colorInfoText: infoColors[9],\r\n    colorInfoTextActive: infoColors[10],\r\n    colorBgMask: new TinyColor('#000').setAlpha(0.45).toRgbString(),\r\n    colorWhite: '#fff'\r\n  });\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}