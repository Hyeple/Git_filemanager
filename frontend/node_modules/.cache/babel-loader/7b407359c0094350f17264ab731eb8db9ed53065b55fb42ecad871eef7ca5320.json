{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useRef } from 'react';\nimport raf from \"rc-util/es/raf\";\nimport { getClientSize } from \"rc-util/es/Dom/css\";\nimport { MIN_SCALE, MAX_SCALE } from \"../previewConfig\";\nvar initialTransform = {\n  x: 0,\n  y: 0,\n  rotate: 0,\n  scale: 1,\n  flipX: false,\n  flipY: false\n};\nexport default function useImageTransform(imgRef) {\n  var frame = useRef(null);\n  var queue = useRef([]);\n  var _useState = useState(initialTransform),\n    _useState2 = _slicedToArray(_useState, 2),\n    transform = _useState2[0],\n    setTransform = _useState2[1];\n  var resetTransform = function resetTransform() {\n    setTransform(initialTransform);\n  };\n\n  /** Direct update transform */\n  var updateTransform = function updateTransform(newTransform) {\n    if (frame.current === null) {\n      queue.current = [];\n      frame.current = raf(function () {\n        setTransform(function (preState) {\n          var memoState = preState;\n          queue.current.forEach(function (queueState) {\n            memoState = _objectSpread(_objectSpread({}, memoState), queueState);\n          });\n          frame.current = null;\n          return memoState;\n        });\n      });\n    }\n    queue.current.push(_objectSpread(_objectSpread({}, transform), newTransform));\n  };\n\n  /** Scale according to the position of clientX and clientY */\n  var dispatchZoomChange = function dispatchZoomChange(ratio, clientX, clientY) {\n    var _imgRef$current = imgRef.current,\n      width = _imgRef$current.width,\n      height = _imgRef$current.height,\n      offsetWidth = _imgRef$current.offsetWidth,\n      offsetHeight = _imgRef$current.offsetHeight,\n      offsetLeft = _imgRef$current.offsetLeft,\n      offsetTop = _imgRef$current.offsetTop;\n    var newRatio = ratio;\n    var newScale = transform.scale * ratio;\n    if (newScale > MAX_SCALE) {\n      newRatio = MAX_SCALE / transform.scale;\n      newScale = MAX_SCALE;\n    } else if (newScale < MIN_SCALE) {\n      newRatio = MIN_SCALE / transform.scale;\n      newScale = MIN_SCALE;\n    }\n\n    /** Default center point scaling */\n    var mergedClientX = clientX !== null && clientX !== void 0 ? clientX : innerWidth / 2;\n    var mergedClientY = clientY !== null && clientY !== void 0 ? clientY : innerHeight / 2;\n    var diffRatio = newRatio - 1;\n    /** Deviation calculated from image size */\n    var diffImgX = diffRatio * width * 0.5;\n    var diffImgY = diffRatio * height * 0.5;\n    /** The difference between the click position and the edge of the document */\n    var diffOffsetLeft = diffRatio * (mergedClientX - transform.x - offsetLeft);\n    var diffOffsetTop = diffRatio * (mergedClientY - transform.y - offsetTop);\n    /** Final positioning */\n    var newX = transform.x - (diffOffsetLeft - diffImgX);\n    var newY = transform.y - (diffOffsetTop - diffImgY);\n\n    /**\r\n     * When zooming the image\r\n     * When the image size is smaller than the width and height of the window, the position is initialized\r\n     */\n    if (ratio < 1 && newScale === 1) {\n      var mergedWidth = offsetWidth * newScale;\n      var mergedHeight = offsetHeight * newScale;\n      var _getClientSize = getClientSize(),\n        clientWidth = _getClientSize.width,\n        clientHeight = _getClientSize.height;\n      if (mergedWidth <= clientWidth && mergedHeight <= clientHeight) {\n        newX = 0;\n        newY = 0;\n      }\n    }\n    updateTransform({\n      x: newX,\n      y: newY,\n      scale: newScale\n    });\n  };\n  return {\n    transform: transform,\n    resetTransform: resetTransform,\n    updateTransform: updateTransform,\n    dispatchZoomChange: dispatchZoomChange\n  };\n}\n;","map":{"version":3,"names":["_objectSpread","_slicedToArray","useState","useRef","raf","getClientSize","MIN_SCALE","MAX_SCALE","initialTransform","x","y","rotate","scale","flipX","flipY","useImageTransform","imgRef","frame","queue","_useState","_useState2","transform","setTransform","resetTransform","updateTransform","newTransform","current","preState","memoState","forEach","queueState","push","dispatchZoomChange","ratio","clientX","clientY","_imgRef$current","width","height","offsetWidth","offsetHeight","offsetLeft","offsetTop","newRatio","newScale","mergedClientX","innerWidth","mergedClientY","innerHeight","diffRatio","diffImgX","diffImgY","diffOffsetLeft","diffOffsetTop","newX","newY","mergedWidth","mergedHeight","_getClientSize","clientWidth","clientHeight"],"sources":["C:/Users/parkj/Desktop/OSS/Git_filemanager/frontend/node_modules/rc-image/es/hooks/useImageTransform.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\r\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\r\nimport { useState, useRef } from 'react';\r\nimport raf from \"rc-util/es/raf\";\r\nimport { getClientSize } from \"rc-util/es/Dom/css\";\r\nimport { MIN_SCALE, MAX_SCALE } from \"../previewConfig\";\r\nvar initialTransform = {\r\n  x: 0,\r\n  y: 0,\r\n  rotate: 0,\r\n  scale: 1,\r\n  flipX: false,\r\n  flipY: false\r\n};\r\nexport default function useImageTransform(imgRef) {\r\n  var frame = useRef(null);\r\n  var queue = useRef([]);\r\n  var _useState = useState(initialTransform),\r\n    _useState2 = _slicedToArray(_useState, 2),\r\n    transform = _useState2[0],\r\n    setTransform = _useState2[1];\r\n  var resetTransform = function resetTransform() {\r\n    setTransform(initialTransform);\r\n  };\r\n\r\n  /** Direct update transform */\r\n  var updateTransform = function updateTransform(newTransform) {\r\n    if (frame.current === null) {\r\n      queue.current = [];\r\n      frame.current = raf(function () {\r\n        setTransform(function (preState) {\r\n          var memoState = preState;\r\n          queue.current.forEach(function (queueState) {\r\n            memoState = _objectSpread(_objectSpread({}, memoState), queueState);\r\n          });\r\n          frame.current = null;\r\n          return memoState;\r\n        });\r\n      });\r\n    }\r\n    queue.current.push(_objectSpread(_objectSpread({}, transform), newTransform));\r\n  };\r\n\r\n  /** Scale according to the position of clientX and clientY */\r\n  var dispatchZoomChange = function dispatchZoomChange(ratio, clientX, clientY) {\r\n    var _imgRef$current = imgRef.current,\r\n      width = _imgRef$current.width,\r\n      height = _imgRef$current.height,\r\n      offsetWidth = _imgRef$current.offsetWidth,\r\n      offsetHeight = _imgRef$current.offsetHeight,\r\n      offsetLeft = _imgRef$current.offsetLeft,\r\n      offsetTop = _imgRef$current.offsetTop;\r\n    var newRatio = ratio;\r\n    var newScale = transform.scale * ratio;\r\n    if (newScale > MAX_SCALE) {\r\n      newRatio = MAX_SCALE / transform.scale;\r\n      newScale = MAX_SCALE;\r\n    } else if (newScale < MIN_SCALE) {\r\n      newRatio = MIN_SCALE / transform.scale;\r\n      newScale = MIN_SCALE;\r\n    }\r\n\r\n    /** Default center point scaling */\r\n    var mergedClientX = clientX !== null && clientX !== void 0 ? clientX : innerWidth / 2;\r\n    var mergedClientY = clientY !== null && clientY !== void 0 ? clientY : innerHeight / 2;\r\n    var diffRatio = newRatio - 1;\r\n    /** Deviation calculated from image size */\r\n    var diffImgX = diffRatio * width * 0.5;\r\n    var diffImgY = diffRatio * height * 0.5;\r\n    /** The difference between the click position and the edge of the document */\r\n    var diffOffsetLeft = diffRatio * (mergedClientX - transform.x - offsetLeft);\r\n    var diffOffsetTop = diffRatio * (mergedClientY - transform.y - offsetTop);\r\n    /** Final positioning */\r\n    var newX = transform.x - (diffOffsetLeft - diffImgX);\r\n    var newY = transform.y - (diffOffsetTop - diffImgY);\r\n\r\n    /**\r\n     * When zooming the image\r\n     * When the image size is smaller than the width and height of the window, the position is initialized\r\n     */\r\n    if (ratio < 1 && newScale === 1) {\r\n      var mergedWidth = offsetWidth * newScale;\r\n      var mergedHeight = offsetHeight * newScale;\r\n      var _getClientSize = getClientSize(),\r\n        clientWidth = _getClientSize.width,\r\n        clientHeight = _getClientSize.height;\r\n      if (mergedWidth <= clientWidth && mergedHeight <= clientHeight) {\r\n        newX = 0;\r\n        newY = 0;\r\n      }\r\n    }\r\n    updateTransform({\r\n      x: newX,\r\n      y: newY,\r\n      scale: newScale\r\n    });\r\n  };\r\n  return {\r\n    transform: transform,\r\n    resetTransform: resetTransform,\r\n    updateTransform: updateTransform,\r\n    dispatchZoomChange: dispatchZoomChange\r\n  };\r\n}\r\n;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}